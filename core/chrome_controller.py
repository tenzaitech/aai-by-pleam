#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI-Powered Chrome Controller
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Chrome ‡∏î‡πâ‡∏ß‡∏¢ AI
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import openai
import cv2
import numpy as np
from PIL import Image
import io
import atexit
import logging
import threading
import time
import subprocess

class AIChromeController:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(AIChromeController, cls).__new__(cls)
                cls._instance._initialized = False
            return cls._instance

    def __init__(self, openai_api_key=""):
        if self._initialized:
            if hasattr(self, 'logger'):
                self.logger.info("[SINGLETON] Reuse existing AIChromeController instance.")
            return
        self.logger = logging.getLogger(__name__)
        self.logger.info("[SINGLETON] Create new AIChromeController instance.")
        self.driver = None
        self.openai_client = None
        self._lock = threading.Lock()
        self._is_initializing = False
        self._last_activity = time.time()
        if openai_api_key:
            try:
                self.openai_client = openai
                self.openai_client.api_key = openai_api_key
            except Exception as e:
                self.logger.warning(f"OpenAI init error: {e}")
        atexit.register(self.cleanup)
        self._initialized = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° auto cleanup thread
        self.start_auto_cleanup_thread()
        
    def auto_cleanup_chrome_process(self):
        """Kill all chrome.exe processes (Windows only)"""
        try:
            subprocess.call(['taskkill', '/F', '/IM', 'chrome.exe'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            self.logger.info("[AUTO CLEANUP] Killed all chrome.exe processes.")
        except Exception as e:
            self.logger.warning(f"[AUTO CLEANUP] Failed to kill chrome.exe: {e}")

    async def start_ai_browser(self, headless=True):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI browser"""
        import traceback
        import threading
        
        # DEBUG: Log caller information
        caller_frame = traceback.extract_stack()[-2]
        self.logger.info(f"üîç DEBUG: start_ai_browser called from {caller_frame.filename}:{caller_frame.lineno}")
        self.logger.info(f"üîç DEBUG: Thread ID: {threading.current_thread().ident}")
        self.logger.info(f"üîç DEBUG: headless={headless}")
        
        self.logger.info("[BROWSER] start_ai_browser called.")
        
        # Auto cleanup chrome.exe ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
        self.auto_cleanup_chrome_process()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ driver ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self.driver:
            try:
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ driver ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                self.driver.current_url
                self.logger.info("üîç DEBUG: Existing driver is still working, reusing...")
                return True
            except Exception:
                self.logger.info("üîç DEBUG: Existing driver is dead, cleaning up...")
                self.driver = None
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á driver ‡∏ã‡πâ‡∏≥
        if self._is_initializing:
            self.logger.info("üîç DEBUG: Already initializing, skipping...")
            return False
        
        self._is_initializing = True
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome options
            self.logger.info("üîç DEBUG: Creating Chrome options...")
            options = Options()
            
            if headless:
                self.logger.info("üîç DEBUG: Headless mode enabled")
                options.add_argument("--headless")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏ã‡πâ‡∏≥
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            options.add_argument("--disable-images")
            options.add_argument("--disable-javascript")
            options.add_argument("--disable-web-security")
            options.add_argument("--disable-features=VizDisplayCompositor")
            options.add_argument("--remote-debugging-port=0")
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
            options.add_argument("--disable-features=TranslateUI")
            options.add_argument("--disable-ipc-flooding-protection")
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏ã‡πâ‡∏≥
            options.add_argument("--single-process")
            options.add_argument("--no-zygote")
            options.add_argument("--disable-background-networking")
            options.add_argument("--disable-default-apps")
            options.add_argument("--disable-sync")
            options.add_argument("--disable-translate")
            options.add_argument("--hide-scrollbars")
            options.add_argument("--mute-audio")
            options.add_argument("--no-first-run")
            options.add_argument("--disable-client-side-phishing-detection")
            options.add_argument("--disable-component-update")
            options.add_argument("--disable-domain-reliability")
            options.add_argument("--disable-features=AudioServiceOutOfProcess")
            options.add_argument("--disable-hang-monitor")
            options.add_argument("--disable-prompt-on-repost")
            options.add_argument("--disable-web-resources")
            options.add_argument("--disable-features=VizDisplayCompositor")
            options.add_argument("--disable-features=TranslateUI")
            options.add_argument("--disable-features=BlinkGenPropertyTrees")
            options.add_argument("--disable-features=CalculateNativeWinOcclusion")
            options.add_argument("--disable-features=GlobalMediaControls")
            options.add_argument("--disable-features=MediaRouter")
            options.add_argument("--disable-features=OptimizationHints")
            options.add_argument("--disable-features=PasswordGeneration")
            options.add_argument("--disable-features=PreloadMediaEngagementData")
            options.add_argument("--disable-features=Translate")
            options.add_argument("--disable-features=WebUIDarkMode")
            options.add_argument("--disable-features=WebUIDarkModeV2")
            options.add_argument("--disable-features=WebUIDarkModeV3")
            options.add_argument("--disable-features=WebUIDarkModeV4")
            options.add_argument("--disable-features=WebUIDarkModeV5")
            options.add_argument("--disable-features=WebUIDarkModeV6")
            options.add_argument("--disable-features=WebUIDarkModeV7")
            options.add_argument("--disable-features=WebUIDarkModeV8")
            options.add_argument("--disable-features=WebUIDarkModeV9")
            options.add_argument("--disable-features=WebUIDarkModeV10")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome driver
            self.logger.info("üîç DEBUG: Creating Chrome driver...")
            self.driver = webdriver.Chrome(options=options)
            
            self.logger.info("‚úÖ Chrome browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self.logger.info(f"üîç DEBUG: Driver session ID: {self.driver.session_id}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome browser: {e}")
            self.driver = None
            return False
        finally:
            self._is_initializing = False
        
    async def ai_navigate(self, url, instruction=""):
        """‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI"""
        if not self.driver:
            self.logger.warning("‚ùå Chrome ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False
        try:
            self.driver.get(url)
            self.logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î URL: {url}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÑ‡∏î‡πâ: {e}")
            return False
        
    async def ai_click(self, natural_description):
        """‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ AI"""
        if not self.driver:
            self.logger.warning("‚ùå Chrome ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False
        try:
            # ‡πÉ‡∏ä‡πâ AI ‡∏´‡∏≤ element ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
            screenshot = self.driver.get_screenshot_as_png()
            element_info = await self.find_element_with_ai(screenshot, natural_description)
            if element_info:
                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà AI ‡∏ö‡∏≠‡∏Å
                x, y = element_info['coordinates']
                self.driver.execute_script(f"document.elementFromPoint({x}, {y}).click()")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ: {e}")
            return False
        
    async def analyze_screenshot_with_ai(self, screenshot, instruction):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå screenshot ‡∏î‡πâ‡∏ß‡∏¢ AI"""
        if not self.openai_client:
            self.logger.warning("‚ùå OpenAI client ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return None
        # ‡∏™‡πà‡∏á screenshot ‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        pass
        
    async def find_element_with_ai(self, screenshot, description):
        """‡∏´‡∏≤ element ‡∏î‡πâ‡∏ß‡∏¢ AI"""
        if not self.openai_client:
            self.logger.warning("‚ùå OpenAI client ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return None
        # ‡πÉ‡∏ä‡πâ AI ‡∏´‡∏≤ element ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        pass
        
    def cleanup(self):
        """‡∏õ‡∏¥‡∏î Chrome driver"""
        if hasattr(self, 'logger'):
            self.logger.info("[BROWSER] cleanup called.")
        if self.driver:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ driver ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                try:
                    self.driver.current_url
                    self.driver.quit()
                    if hasattr(self, 'logger'):
                        self.logger.info("üîå ‡∏õ‡∏¥‡∏î Chrome driver ‡πÅ‡∏•‡πâ‡∏ß")
                except Exception:
                    if hasattr(self, 'logger'):
                        self.logger.info("üîå Chrome driver ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                if hasattr(self, 'logger'):
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î Chrome driver: {e}")
            finally:
                self.driver = None
            
    def __del__(self):
        """Destructor - ‡∏õ‡∏¥‡∏î driver ‡πÄ‡∏°‡∏∑‡πà‡∏≠ object ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢"""
        self.cleanup()
        
    def is_ready(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Chrome Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.driver is not None

    def start_auto_cleanup_thread(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° background thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto cleanup chrome.exe"""
        import threading
        import time
        
        def cleanup_loop():
            while True:
                try:
                    time.sleep(30)  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    self.auto_cleanup_chrome_process()
                except Exception as e:
                    if hasattr(self, 'logger'):
                        self.logger.warning(f"Auto cleanup error: {e}")
                    time.sleep(60)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        
        cleanup_thread = threading.Thread(target=cleanup_loop, daemon=True)
        cleanup_thread.start()
        self.logger.info("[AUTO CLEANUP] Background cleanup thread started")
