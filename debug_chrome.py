#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Debug Chrome Controller
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Chrome ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
"""

import asyncio
import logging
import traceback
import threading
import time
from pathlib import Path

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def debug_chrome_controller():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome Controller ‡πÅ‡∏ö‡∏ö debug"""
    logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Debug Chrome Controller")
    
    try:
        # ‡πÉ‡∏ä‡πâ Singleton
        from core.chrome_controller import AIChromeController
        chrome_controller = AIChromeController()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° browser
        logger.info("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° browser...")
        success = await chrome_controller.start_ai_browser(headless=True)
        
        if success:
            logger.info("‚úÖ Browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
            logger.info("üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á...")
            nav_success = await chrome_controller.ai_navigate("https://www.google.com", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            
            if nav_success:
                logger.info("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                logger.error("‚ùå ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            await asyncio.sleep(2)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î browser - DISABLED
            logger.info("üîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î browser - DISABLED")
            logger.debug(f"[DEBUG] cleanup() called from: {traceback.format_stack()}")
            # chrome_controller.cleanup()  # DISABLED - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            logger.info("‚úÖ Browser cleanup disabled by user preference")
            
        else:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° browser ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        logger.error(f"üîç Traceback: {traceback.format_exc()}")

async def debug_multiple_instances():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome Controller ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß"""
    logger.info("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome Controller ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß")
    
    try:
        # ‡πÉ‡∏ä‡πâ Singleton
        from core.chrome_controller import AIChromeController
        
        controllers = []
        
        for i in range(3):
            logger.info(f"üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome Controller #{i+1}...")
            controller = AIChromeController()
            controllers.append(controller)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° browser
            success = await controller.start_ai_browser(headless=True)
            if success:
                logger.info(f"‚úÖ Controller #{i+1} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                logger.error(f"‚ùå Controller #{i+1} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            await asyncio.sleep(1)
        
        # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - DISABLED
        logger.info("üîå ‡∏õ‡∏¥‡∏î controllers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - DISABLED")
        for i, controller in enumerate(controllers):
            logger.debug(f"[DEBUG] cleanup() called from: {traceback.format_stack()}")
            # controller.cleanup()  # DISABLED - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            logger.info(f"‚úÖ Controller #{i+1} cleanup disabled by user preference")
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        logger.error(f"üîç Traceback: {traceback.format_exc()}")

async def debug_master_controller():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Master Controller"""
    logger.info("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Master Controller")
    
    try:
        from master_controller import FullSystemLauncher
        
        launcher = FullSystemLauncher()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
        logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
        await launcher.initialize_components()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status = launcher.get_system_status()
        logger.info(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: {status}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome
        logger.info("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome...")
        success = await launcher.start_chrome_browser(headless=True)
        
        if success:
            logger.info("‚úÖ Chrome ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            await asyncio.sleep(2)
            
            # ‡∏õ‡∏¥‡∏î Chrome - DISABLED
            logger.info("üîå ‡∏õ‡∏¥‡∏î Chrome - DISABLED")
            logger.debug(f"[DEBUG] stop_chrome_browser() called from: {traceback.format_stack()}")
            await launcher.stop_chrome_browser()
            logger.info("‚úÖ Chrome cleanup disabled by user preference")
            
        else:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        logger.error(f"üîç Traceback: {traceback.format_exc()}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Debug Session")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: Chrome Controller ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    logger.info("\n" + "="*50)
    logger.info("‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: Chrome Controller ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß")
    logger.info("="*50)
    await debug_chrome_controller()
    
    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    await asyncio.sleep(3)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: Chrome Controller ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
    logger.info("\n" + "="*50)
    logger.info("‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: Chrome Controller ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß")
    logger.info("="*50)
    await debug_multiple_instances()
    
    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    await asyncio.sleep(3)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: Master Controller
    logger.info("\n" + "="*50)
    logger.info("‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: Master Controller")
    logger.info("="*50)
    await debug_master_controller()
    
    logger.info("\nüéâ Debug Session ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüõë Debug Session ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        logger.error(f"\n‚ùå Debug Session ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}") 