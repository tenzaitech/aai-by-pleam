# WAWAGOT.AI - Environment Quick Check
# ===============================================================================
# WAWAGOT.AI - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
# ===============================================================================
# Created: 2024-12-19
# Purpose: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
# ===============================================================================

import os
import sys
import psutil
import platform
import json
import asyncio
import subprocess
import shutil
from datetime import datetime
try:
    from zoneinfo import ZoneInfo
    TZ_BANGKOK = ZoneInfo("Asia/Bangkok")
except ImportError:
    import pytz
    TZ_BANGKOK = pytz.timezone("Asia/Bangkok")
from typing import Dict, List, Any, Tuple
import time

# ===============================================================================
# QUICK CHECK FUNCTIONS
# ===============================================================================

class EnvironmentQuickCheck:
    """‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
    
    def __init__(self):
        self.check_results = {}
        self.issues = []
        self.recommendations = []
    
    async def run_full_check(self) -> Dict[str, Any]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° WAWAGOT.AI...")
        print("=" * 60)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        await self._check_system_basics()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python Environment
        await self._check_python_environment()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies
        await self._check_dependencies()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network
        await self._check_network()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Services
        await self._check_services()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage
        await self._check_storage()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Performance
        await self._check_performance()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Security
        await self._check_security()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        return self._generate_summary()
    
    async def _check_system_basics(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("\nüíª ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
        
        try:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
            os_info = platform.uname()
            self.check_results["system"] = {
                "os_name": os_info.system,
                "os_version": os_info.release,
                "architecture": os_info.machine,
                "hostname": os_info.node,
                "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
            }
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
            cpu_count = psutil.cpu_count()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            self.check_results["hardware"] = {
                "cpu_count": cpu_count,
                "total_memory_gb": round(memory.total / 1024 / 1024 / 1024, 2),
                "available_memory_gb": round(memory.available / 1024 / 1024 / 1024, 2),
                "total_disk_gb": round(disk.total / 1024 / 1024 / 1024, 2),
                "free_disk_gb": round(disk.free / 1024 / 1024 / 1024, 2)
            }
            
            print(f"   ‚úÖ OS: {os_info.system} {os_info.release}")
            print(f"   ‚úÖ Architecture: {os_info.machine}")
            print(f"   ‚úÖ CPU Cores: {cpu_count}")
            print(f"   ‚úÖ Memory: {self.check_results['hardware']['total_memory_gb']} GB")
            print(f"   ‚úÖ Disk: {self.check_results['hardware']['total_disk_gb']} GB")
            
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    async def _check_python_environment(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python Environment"""
        print("\nüêç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python Environment...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
            python_version = sys.version_info
            if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
                self.issues.append("Python version ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 3.8 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
                print(f"   ‚ùå Python version: {python_version.major}.{python_version.minor}.{python_version.micro} (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 3.8+)")
            else:
                print(f"   ‚úÖ Python version: {python_version.major}.{python_version.minor}.{python_version.micro}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Virtual Environment
            if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
                print("   ‚úÖ Virtual Environment: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
                self.check_results["virtual_env"] = True
            else:
                print("   ‚ö†Ô∏è Virtual Environment: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ)")
                self.recommendations.append("‡πÉ‡∏ä‡πâ Virtual Environment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å dependencies")
                self.check_results["virtual_env"] = False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python path
            python_path = sys.executable
            print(f"   ‚úÖ Python Path: {python_path}")
            self.check_results["python_path"] = python_path
            
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python Environment: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    async def _check_dependencies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies"""
        print("\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies...")
        
        required_packages = [
            "flask", "fastapi", "requests", "aiohttp", "psutil",
            "selenium", "playwright", "openai", "google-generativeai",
            "supabase", "redis", "pandas", "numpy", "tensorflow", "torch"
        ]
        
        missing_packages = []
        installed_packages = []
        
        for package in required_packages:
            try:
                __import__(package.replace("-", "_"))
                installed_packages.append(package)
                print(f"   ‚úÖ {package}")
            except ImportError:
                missing_packages.append(package)
                print(f"   ‚ùå {package} (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
        
        self.check_results["dependencies"] = {
            "installed": installed_packages,
            "missing": missing_packages,
            "total_required": len(required_packages),
            "total_installed": len(installed_packages)
        }
        
        if missing_packages:
            self.issues.append(f"‡∏Ç‡∏≤‡∏î Dependencies: {', '.join(missing_packages)}")
            self.recommendations.append(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î: pip install {' '.join(missing_packages)}")
    
    async def _check_network(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"""
        print("\nüåê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
            import urllib.request
            try:
                urllib.request.urlopen('http://www.google.com', timeout=5)
                print("   ‚úÖ Internet Connection: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                self.check_results["internet"] = True
            except:
                print("   ‚ùå Internet Connection: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                self.check_results["internet"] = False
                self.issues.append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏î‡πâ")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network Interfaces
            network_info = {}
            for interface, stats in psutil.net_if_stats().items():
                if stats.isup:
                    addrs = psutil.net_if_addrs().get(interface, [])
                    ip_address = ""
                    for addr in addrs:
                        if addr.family == psutil.AF_INET:
                            ip_address = addr.address
                            break
                    
                    if ip_address:
                        network_info[interface] = ip_address
                        print(f"   ‚úÖ {interface}: {ip_address}")
            
            self.check_results["network_interfaces"] = network_info
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DNS
            try:
                import socket
                socket.gethostbyname("google.com")
                print("   ‚úÖ DNS Resolution: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                self.check_results["dns"] = True
            except:
                print("   ‚ùå DNS Resolution: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                self.check_results["dns"] = False
                self.issues.append("DNS resolution ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    async def _check_services(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"""
        print("\nüîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£...")
        
        services_to_check = [
            {"name": "WAWAGOT.AI API", "port": 5000},
            {"name": "Dashboard", "port": 8080},
            {"name": "Database", "port": 5432},
            {"name": "Redis", "port": 6379}
        ]
        
        services_status = {}
        
        for service in services_to_check:
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('localhost', service["port"]))
                sock.close()
                
                if result == 0:
                    print(f"   ‚úÖ {service['name']}: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Port {service['port']})")
                    services_status[service["name"]] = "running"
                else:
                    print(f"   ‚ö†Ô∏è {service['name']}: ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Port {service['port']})")
                    services_status[service["name"]] = "stopped"
                    
            except Exception as e:
                print(f"   ‚ùå {service['name']}: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {e}")
                services_status[service["name"]] = "error"
        
        self.check_results["services"] = services_status
    
    async def _check_storage(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö"""
        print("\nüíæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            
            print(f"   ‚úÖ Total Disk: {round(disk.total / 1024 / 1024 / 1024, 2)} GB")
            print(f"   ‚úÖ Used Disk: {round(disk.used / 1024 / 1024 / 1024, 2)} GB")
            print(f"   ‚úÖ Free Disk: {round(disk.free / 1024 / 1024 / 1024, 2)} GB")
            print(f"   ‚úÖ Usage: {disk_percent:.1f}%")
            
            if disk_percent > 90:
                self.issues.append(f"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î: {disk_percent:.1f}%")
                print(f"   ‚ö†Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î!")
            elif disk_percent > 80:
                self.recommendations.append("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡πá‡∏° ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
                print(f"   ‚ö†Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡πá‡∏°")
            
            self.check_results["storage"] = {
                "total_gb": round(disk.total / 1024 / 1024 / 1024, 2),
                "used_gb": round(disk.used / 1024 / 1024 / 1024, 2),
                "free_gb": round(disk.free / 1024 / 1024 / 1024, 2),
                "usage_percent": disk_percent
            }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            important_files = [
                "system_environment_manager.py",
                "environment_dashboard.py",
                "requirements.txt",
                "config/system_config.json"
            ]
            
            missing_files = []
            for file_path in important_files:
                if os.path.exists(file_path):
                    print(f"   ‚úÖ {file_path}")
                else:
                    missing_files.append(file_path)
                    print(f"   ‚ùå {file_path} (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
            
            if missing_files:
                self.issues.append(f"‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {', '.join(missing_files)}")
                
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    async def _check_performance(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        print("\n‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            print(f"   ‚úÖ CPU Usage: {cpu_percent:.1f}%")
            
            if cpu_percent > 90:
                self.issues.append(f"CPU ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á: {cpu_percent:.1f}%")
            elif cpu_percent > 70:
                self.recommendations.append("CPU ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Memory
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            print(f"   ‚úÖ Memory Usage: {memory_percent:.1f}%")
            
            if memory_percent > 90:
                self.issues.append(f"Memory ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á: {memory_percent:.1f}%")
            elif memory_percent > 80:
                self.recommendations.append("Memory ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Process count
            process_count = len(psutil.pids())
            print(f"   ‚úÖ Process Count: {process_count}")
            
            if process_count > 200:
                self.recommendations.append("‡∏°‡∏µ Process ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            
            self.check_results["performance"] = {
                "cpu_percent": cpu_percent,
                "memory_percent": memory_percent,
                "process_count": process_count
            }
            
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    async def _check_security(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        print("\nüîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            important_env_vars = [
                "OPENAI_API_KEY",
                "SUPABASE_URL",
                "SUPABASE_KEY",
                "RETELL_API_KEY"
            ]
            
            missing_env_vars = []
            for env_var in important_env_vars:
                if os.getenv(env_var):
                    print(f"   ‚úÖ {env_var}: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    missing_env_vars.append(env_var)
                    print(f"   ‚ö†Ô∏è {env_var}: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            
            if missing_env_vars:
                self.recommendations.append(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables: {', '.join(missing_env_vars)}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env
            if os.path.exists(".env"):
                print("   ‚úÖ .env file: ‡∏û‡∏ö")
            else:
                print("   ‚ö†Ô∏è .env file: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á)")
                self.recommendations.append("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Environment Variables")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git ignore
            if os.path.exists(".gitignore"):
                with open(".gitignore", "r") as f:
                    gitignore_content = f.read()
                    if ".env" in gitignore_content:
                        print("   ‚úÖ .env ‡πÉ‡∏ô .gitignore: ‡πÉ‡∏ä‡πà")
                    else:
                        print("   ‚ö†Ô∏è .env ‡πÉ‡∏ô .gitignore: ‡πÑ‡∏°‡πà (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)")
                        self.recommendations.append("‡πÄ‡∏û‡∏¥‡πà‡∏° .env ‡πÉ‡∏ô .gitignore")
            else:
                print("   ‚ö†Ô∏è .gitignore: ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                self.recommendations.append("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .gitignore")
            
            self.check_results["security"] = {
                "missing_env_vars": missing_env_vars,
                "has_env_file": os.path.exists(".env"),
                "has_gitignore": os.path.exists(".gitignore")
            }
            
        except Exception as e:
            self.issues.append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {e}")
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    def _generate_summary(self) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
        print("\n" + "=" * 60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        print("=" * 60)
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        total_checks = 8  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        issues_count = len(self.issues)
        recommendations_count = len(self.recommendations)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        score = max(0, 100 - (issues_count * 15) - (recommendations_count * 5))
        
        print(f"üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {score}/100")
        print(f"‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö: {issues_count}")
        print(f"üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {recommendations_count}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        if self.issues:
            print(f"\n‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
            for i, issue in enumerate(self.issues, 1):
                print(f"   {i}. {issue}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if self.recommendations:
            print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
            for i, recommendation in enumerate(self.recommendations, 1):
                print(f"   {i}. {recommendation}")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if score >= 90:
            print(f"\n‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        elif score >= 70:
            print(f"\n‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
        elif score >= 50:
            print(f"\n‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        else:
            print(f"\n‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÅ‡∏¢‡πà ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        return {
            "timestamp": datetime.now(TZ_BANGKOK).isoformat(),
            "score": score,
            "total_checks": total_checks,
            "issues_count": issues_count,
            "recommendations_count": recommendations_count,
            "issues": self.issues,
            "recommendations": self.recommendations,
            "details": self.check_results,
            "status": "excellent" if score >= 90 else "good" if score >= 70 else "fair" if score >= 50 else "poor"
        }

# ===============================================================================
# QUICK CHECK FUNCTIONS
# ===============================================================================

async def quick_check() -> Dict[str, Any]:
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
    checker = EnvironmentQuickCheck()
    return await checker.run_full_check()

async def check_specific_area(area: str) -> Dict[str, Any]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô"""
    checker = EnvironmentQuickCheck()
    
    if area == "system":
        await checker._check_system_basics()
    elif area == "python":
        await checker._check_python_environment()
    elif area == "dependencies":
        await checker._check_dependencies()
    elif area == "network":
        await checker._check_network()
    elif area == "services":
        await checker._check_services()
    elif area == "storage":
        await checker._check_storage()
    elif area == "performance":
        await checker._check_performance()
    elif area == "security":
        await checker._check_security()
    else:
        return {"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {area}"}
    
    return checker.check_results

def save_check_results(results: Dict[str, Any], filename: str = None):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
    if not filename:
        timestamp = datetime.now(TZ_BANGKOK).strftime("%Y%m%d_%H%M%S")
        filename = f"environment_check_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {filename}")

# ===============================================================================
# MAIN EXECUTION
# ===============================================================================

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ WAWAGOT.AI Environment Quick Check")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    results = await quick_check()
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
    save_check_results(results)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON
    print(f"\nüìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON:")
    print(json.dumps(results, ensure_ascii=False, indent=2))

if __name__ == "__main__":
    asyncio.run(main()) 