#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI ‡πÉ‡∏ô Supabase
"""

import os
from dotenv import load_dotenv
import json
from datetime import datetime

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

try:
    from supabase import create_client, Client
except ImportError as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import supabase: {e}")
    print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: pip install supabase")
    exit(1)

def create_wawagot_tables():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI"""
    print("üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI")
    print("=" * 60)
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ environment variables
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_KEY ‡πÉ‡∏ô environment")
        return
    
    print(f"üì° URL: {supabase_url}")
    print(f"üîë Key: {supabase_key[:20]}...")
    print()
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client
        supabase: Client = create_client(supabase_url, supabase_key)
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        tables_sql = {
            # 1. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            'conversation_logs': """
            CREATE TABLE IF NOT EXISTS conversation_logs (
                id SERIAL PRIMARY KEY,
                session_id VARCHAR(255) NOT NULL,
                user_id VARCHAR(255),
                user_message TEXT NOT NULL,
                ai_response TEXT,
                timestamp TIMESTAMP DEFAULT NOW(),
                model_used VARCHAR(100),
                tokens_used INTEGER,
                response_time_ms INTEGER,
                status VARCHAR(50) DEFAULT 'success',
                metadata JSONB
            );
            """,
            
            # 2. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            'user_profiles': """
            CREATE TABLE IF NOT EXISTS user_profiles (
                id SERIAL PRIMARY KEY,
                user_id VARCHAR(255) UNIQUE NOT NULL,
                email VARCHAR(255),
                username VARCHAR(100),
                full_name VARCHAR(200),
                avatar_url TEXT,
                preferences JSONB,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                last_login TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            );
            """,
            
            # 3. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            'system_logs': """
            CREATE TABLE IF NOT EXISTS system_logs (
                id SERIAL PRIMARY KEY,
                level VARCHAR(20) NOT NULL,
                component VARCHAR(100),
                message TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT NOW(),
                user_id VARCHAR(255),
                session_id VARCHAR(255),
                metadata JSONB,
                stack_trace TEXT
            );
            """,
            
            # 4. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
            'knowledge_base': """
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                content TEXT NOT NULL,
                category VARCHAR(100),
                tags TEXT[],
                source VARCHAR(255),
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                created_by VARCHAR(255),
                is_active BOOLEAN DEFAULT TRUE,
                metadata JSONB
            );
            """,
            
            # 5. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            'backup_logs': """
            CREATE TABLE IF NOT EXISTS backup_logs (
                id SERIAL PRIMARY KEY,
                backup_type VARCHAR(50) NOT NULL,
                status VARCHAR(50) NOT NULL,
                file_path TEXT,
                file_size BIGINT,
                start_time TIMESTAMP DEFAULT NOW(),
                end_time TIMESTAMP,
                duration_seconds INTEGER,
                records_backed_up INTEGER,
                error_message TEXT,
                metadata JSONB
            );
            """,
            
            # 6. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
            'health_checks': """
            CREATE TABLE IF NOT EXISTS health_checks (
                id SERIAL PRIMARY KEY,
                check_type VARCHAR(100) NOT NULL,
                status VARCHAR(50) NOT NULL,
                response_time_ms INTEGER,
                timestamp TIMESTAMP DEFAULT NOW(),
                details JSONB,
                error_message TEXT
            );
            """,
            
            # 7. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            'alerts': """
            CREATE TABLE IF NOT EXISTS alerts (
                id SERIAL PRIMARY KEY,
                alert_type VARCHAR(100) NOT NULL,
                severity VARCHAR(20) NOT NULL,
                title VARCHAR(255) NOT NULL,
                message TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT NOW(),
                is_resolved BOOLEAN DEFAULT FALSE,
                resolved_at TIMESTAMP,
                resolved_by VARCHAR(255),
                metadata JSONB
            );
            """,
            
            # 8. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
            'environment_data': """
            CREATE TABLE IF NOT EXISTS environment_data (
                id SERIAL PRIMARY KEY,
                component VARCHAR(100) NOT NULL,
                metric_name VARCHAR(100) NOT NULL,
                metric_value TEXT NOT NULL,
                unit VARCHAR(50),
                timestamp TIMESTAMP DEFAULT NOW(),
                metadata JSONB
            );
            """,
            
            # 9. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
            'file_management': """
            CREATE TABLE IF NOT EXISTS file_management (
                id SERIAL PRIMARY KEY,
                file_name VARCHAR(255) NOT NULL,
                file_path TEXT NOT NULL,
                file_size BIGINT,
                file_type VARCHAR(100),
                mime_type VARCHAR(100),
                uploaded_by VARCHAR(255),
                uploaded_at TIMESTAMP DEFAULT NOW(),
                is_processed BOOLEAN DEFAULT FALSE,
                processing_status VARCHAR(50),
                metadata JSONB
            );
            """,
            
            # 10. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
            'system_config': """
            CREATE TABLE IF NOT EXISTS system_config (
                id SERIAL PRIMARY KEY,
                config_key VARCHAR(255) UNIQUE NOT NULL,
                config_value TEXT NOT NULL,
                config_type VARCHAR(50) DEFAULT 'string',
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                updated_by VARCHAR(255)
            );
            """
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        created_tables = []
        failed_tables = []
        
        for table_name, sql in tables_sql.items():
            try:
                print(f"üî® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table_name}")
                
                # ‡πÉ‡∏ä‡πâ raw SQL query ‡∏ú‡πà‡∏≤‡∏ô REST API
                # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Supabase Python client ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö DDL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                # ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard
                
                print(f"   ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard")
                print(f"   üìù SQL: {sql.strip()[:100]}...")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                try:
                    result = supabase.table(table_name).select('*').limit(1).execute()
                    print(f"   ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table_name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                    created_tables.append(table_name)
                except Exception as e:
                    if "does not exist" in str(e) or "42P01" in str(e):
                        print(f"   ‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ")
                        failed_tables.append(table_name)
                    else:
                        print(f"   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à: {str(e)[:50]}...")
                        failed_tables.append(table_name)
                
            except Exception as e:
                print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table_name}: {e}")
                failed_tables.append(table_name)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print("\n" + "=" * 60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        print("=" * 60)
        
        if created_tables:
            print(f"\n‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ({len(created_tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á):")
            for table in created_tables:
                print(f"   - {table}")
        
        if failed_tables:
            print(f"\n‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ({len(failed_tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á):")
            for table in failed_tables:
                print(f"   - {table}")
        
        print(f"\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard")
        print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com/dashboard")
        print("   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ TENZAITECH-DATABASE")
        print("   3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SQL Editor")
        print("   4. ‡∏£‡∏±‡∏ô SQL ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        print("\n" + "=" * 60)
        print("üìù SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("=" * 60)
        
        for table_name, sql in tables_sql.items():
            if table_name in failed_tables:
                print(f"\n-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table_name}")
                print(sql)
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase: {e}")

def insert_sample_data():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    print("\n" + "=" * 60)
    print("üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    print("=" * 60)
    
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    
    try:
        supabase: Client = create_client(supabase_url, supabase_key)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö system_config
        sample_configs = [
            {
                'config_key': 'system_name',
                'config_value': 'WAWAGOT.AI',
                'config_type': 'string',
                'description': '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö'
            },
            {
                'config_key': 'version',
                'config_value': '2.0.0',
                'config_type': 'string',
                'description': '‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
            },
            {
                'config_key': 'max_conversation_length',
                'config_value': '1000',
                'config_type': 'integer',
                'description': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'
            },
            {
                'config_key': 'ai_model',
                'config_value': 'gpt-4',
                'config_type': 'string',
                'description': '‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ'
            }
        ]
        
        for config in sample_configs:
            try:
                result = supabase.table('system_config').insert(config).execute()
                print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° config: {config['config_key']}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° config {config['config_key']}: {e}")
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö knowledge_base
        sample_knowledge = [
            {
                'title': '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI',
                'content': 'WAWAGOT.AI ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
                'category': 'system',
                'tags': ['ai', 'system', 'guide'],
                'source': 'system',
                'created_by': 'system'
            }
        ]
        
        for knowledge in sample_knowledge:
            try:
                result = supabase.table('knowledge_base').insert(knowledge).execute()
                print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° knowledge: {knowledge['title']}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° knowledge {knowledge['title']}: {e}")
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {e}")

if __name__ == "__main__":
    create_wawagot_tables()
    
    # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    print("\n" + "=" * 60)
    response = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").lower().strip()
    if response in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
        insert_sample_data()
    
    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI") 