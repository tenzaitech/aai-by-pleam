#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase REST API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
"""

import os
import requests
import json
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

def create_tables_via_api():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase REST API"""
    print("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase REST API")
    print("=" * 60)
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ environment variables
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_KEY ‡πÉ‡∏ô environment")
        return
    
    print(f"üì° URL: {supabase_url}")
    print(f"üîë Key: {supabase_key[:20]}...")
    print()
    
    # Headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    headers = {
        'apikey': supabase_key,
        'Authorization': f'Bearer {supabase_key}',
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
    }
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    sample_data = {
        'conversation_logs': {
            'session_id': 'test_session_001',
            'user_id': 'test_user_001',
            'user_message': '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö',
            'ai_response': '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
            'model_used': 'gpt-4',
            'tokens_used': 50,
            'response_time_ms': 1500,
            'status': 'success',
            'metadata': {'source': 'test'}
        },
        'user_profiles': {
            'user_id': 'test_user_001',
            'email': 'test@example.com',
            'username': 'testuser',
            'full_name': 'Test User',
            'preferences': {'theme': 'dark', 'language': 'th'}
        },
        'system_logs': {
            'level': 'INFO',
            'component': 'test_system',
            'message': '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            'user_id': 'test_user_001',
            'session_id': 'test_session_001',
            'metadata': {'test': True}
        },
        'knowledge_base': {
            'title': '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
            'content': '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI',
            'category': 'guide',
            'tags': ['guide', 'manual'],
            'source': 'system',
            'created_by': 'system'
        },
        'backup_logs': {
            'backup_type': 'full',
            'status': 'success',
            'file_path': '/backups/test_backup.zip',
            'file_size': 1024000,
            'duration_seconds': 300,
            'records_backed_up': 1000,
            'metadata': {'test': True}
        },
        'health_checks': {
            'check_type': 'database',
            'status': 'success',
            'response_time_ms': 150,
            'details': {'database': 'supabase', 'connection': 'stable'}
        },
        'alerts': {
            'alert_type': 'system',
            'severity': 'info',
            'title': '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            'message': '‡∏£‡∏∞‡∏ö‡∏ö WAWAGOT.AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            'metadata': {'test': True}
        },
        'environment_data': {
            'component': 'system',
            'metric_name': 'cpu_usage',
            'metric_value': '25',
            'unit': 'percent',
            'metadata': {'test': True}
        },
        'file_management': {
            'file_name': 'test_file.txt',
            'file_path': '/uploads/test_file.txt',
            'file_size': 1024,
            'file_type': 'text',
            'mime_type': 'text/plain',
            'uploaded_by': 'test_user_001',
            'processing_status': 'completed',
            'metadata': {'test': True}
        },
        'system_config': {
            'config_key': 'test_config',
            'config_value': 'test_value',
            'config_type': 'string',
            'description': '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            'updated_by': 'system'
        }
    }
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    results = {}
    
    for table_name, data in sample_data.items():
        try:
            print(f"üî® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table_name}")
            
            # URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
            api_url = f"{supabase_url}/rest/v1/{table_name}"
            
            # ‡∏™‡πà‡∏á POST request
            response = requests.post(
                api_url,
                headers=headers,
                json=data
            )
            
            if response.status_code in [201, 200]:
                print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table_name}")
                results[table_name] = "success"
            else:
                print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code} - {response.text[:100]}")
                results[table_name] = f"error_{response.status_code}"
                
        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:100]}")
            results[table_name] = f"exception_{str(e)[:50]}"
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("=" * 60)
    
    success_count = sum(1 for result in results.values() if result == "success")
    total_count = len(results)
    
    print(f"\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{total_count} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {total_count - success_count}/{total_count} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    
    if success_count > 0:
        print(f"\n‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
        for table, result in results.items():
            if result == "success":
                print(f"   - {table}")
    
    if total_count - success_count > 0:
        print(f"\n‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:")
        for table, result in results.items():
            if result != "success":
                print(f"   - {table}: {result}")
    
    return results

def check_table_structure():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
    print("\n" + "=" * 60)
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    print("=" * 60)
    
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    
    headers = {
        'apikey': supabase_key,
        'Authorization': f'Bearer {supabase_key}',
        'Content-Type': 'application/json'
    }
    
    # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    tables = [
        'conversation_logs',
        'user_profiles', 
        'system_logs',
        'knowledge_base',
        'backup_logs',
        'health_checks',
        'alerts',
        'environment_data',
        'file_management',
        'system_config'
    ]
    
    existing_tables = []
    missing_tables = []
    
    for table in tables:
        try:
            api_url = f"{supabase_url}/rest/v1/{table}?select=*&limit=1"
            response = requests.get(api_url, headers=headers)
            
            if response.status_code == 200:
                print(f"‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
                existing_tables.append(table)
            else:
                print(f"‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table} ‡πÑ‡∏°‡πà‡∏°‡∏µ")
                missing_tables.append(table)
                
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table}: {e}")
            missing_tables.append(table)
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {len(existing_tables)}/{len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    
    if missing_tables:
        print(f"\nüí° ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: {', '.join(missing_tables)}")
        print("\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:")
        print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com/dashboard")
        print("   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ TENZAITECH-DATABASE")
        print("   3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SQL Editor")
        print("   4. ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå wawagot_tables.sql")
    
    return existing_tables, missing_tables

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    existing, missing = check_table_structure()
    
    if missing:
        print(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")
        create_tables_via_api()
    else:
        print(f"\n‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        create_tables_via_api()
    
    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") 