"""
Master System Builder - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö backup-bygod ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
‡∏£‡∏ß‡∏° AI-Powered Generator + Parallel Processor + Smart Templates
"""

import asyncio
import time
import logging
from pathlib import Path
from typing import Dict, List, Any

# Import ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
from ai_powered_generator import AISystemGenerator
from parallel_processor import ParallelProcessor, FileProcessor, SystemBuilder
from smart_templates import SmartTemplate

class MasterSystemBuilder:
    """
    Master System Builder - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
    """
    
    def __init__(self):
        self.logger = self.setup_logger()
        self.ai_generator = AISystemGenerator()
        self.parallel_processor = ParallelProcessor(max_workers=8)
        self.file_processor = FileProcessor()
        self.smart_template = SmartTemplate()
        self.start_time = time.time()
        
    def setup_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('master_builder.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
    
    async def build_complete_backup_system(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö backup-bygod ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö backup-bygod ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà")
        self.logger.info("‚ö° ‡πÉ‡∏ä‡πâ AI + Parallel + Smart Templates - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
        
        # Phase 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        await self.create_base_structure()
        
        # Phase 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        await self.create_core_files_parallel()
        
        # Phase 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        await self.create_support_files_parallel()
        
        # Phase 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°
        await self.create_master_package()
        
        # Phase 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        await self.create_one_click_launcher()
        
        elapsed_time = time.time() - self.start_time
        self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        self.logger.info("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏£‡∏±‡∏ô run_system.py")
        
    async def create_base_structure(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        self.logger.info("üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
        
        directories = [
            'core',
            'config', 
            'data',
            'logs',
            'screenshots',
            'temp',
            'docs',
            'tools'
        ]
        
        for dir_name in directories:
            dir_path = Path(dir_name)
            dir_path.mkdir(parents=True, exist_ok=True)
            self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {dir_name}")
    
    async def create_core_files_parallel(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        self.logger.info("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô...")
        
        # ‡πÉ‡∏ä‡πâ Smart Templates ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        core_files = [
            ('master_controller.py', self.smart_template.generate_template('system_launcher', 'full_system')),
            ('core/chrome_controller.py', self.smart_template.generate_template('chrome_automation', 'ai_powered')),
            ('core/thai_processor.py', self.smart_template.generate_template('thai_processor', 'full_featured')),
            ('core/ai_integration.py', self.smart_template.generate_template('ai_integration', 'multimodal')),
            ('core/visual_recognition.py', self.get_visual_recognition_template()),
            ('core/config_manager.py', self.get_config_manager_template()),
            ('core/__init__.py', '"""Core modules for backup-bygod system"""'),
            ('core/backup_controller.py', '''"""
Backup Controller - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ backup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""
import os
import shutil
import json
from datetime import datetime
from pathlib import Path

class BackupController:
    def __init__(self):
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
    
    def create_backup(self, source_path: str, backup_name: str = None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á backup"""
        if not backup_name:
            backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        backup_path = self.backup_dir / backup_name
        shutil.copytree(source_path, backup_path)
        
        return str(backup_path)
    
    def restore_backup(self, backup_path: str, target_path: str):
        """‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô backup"""
        if os.path.exists(target_path):
            shutil.rmtree(target_path)
        shutil.copytree(backup_path, target_path)
        
        return True
'''),
            ('core/restore_controller.py', '''"""
Restore Controller - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""
import os
import shutil
from pathlib import Path

class RestoreController:
    def __init__(self):
        self.restore_log = []
    
    def restore_system(self, backup_path: str, target_path: str):
        """‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            if os.path.exists(target_path):
                shutil.rmtree(target_path)
            shutil.copytree(backup_path, target_path)
            self.restore_log.append(f"Restored: {backup_path} -> {target_path}")
            return True
        except Exception as e:
            self.restore_log.append(f"Error: {e}")
            return False
'''),
            ('core/system_monitor.py', '''"""
System Monitor - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
"""
import psutil
import os
from datetime import datetime

class SystemMonitor:
    def __init__(self):
        self.monitor_log = []
    
    def check_system_health(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö"""
        health = {
            'cpu_usage': psutil.cpu_percent(),
            'memory_usage': psutil.virtual_memory().percent,
            'disk_usage': psutil.disk_usage('/').percent,
            'timestamp': datetime.now().isoformat()
        }
        
        self.monitor_log.append(health)
        return health
'''),
            ('requirements.txt', self.get_requirements_template()),
            ('README.md', self.get_readme_template())
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Parallel Processor
        file_specs = [(path, content) for path, content in core_files]
        results = await self.file_processor.create_multiple_files_parallel(file_specs)
        
        success_count = sum(1 for r in results if not isinstance(r, Exception))
        self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{len(core_files)}")
    
    async def create_support_files_parallel(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        self.logger.info("üõ†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô...")
        
        support_files = [
            ('config/__init__.py', '"""Configuration modules"""'),
            ('config/backup_config.json', '''{
    "backup_settings": {
        "auto_backup": true,
        "backup_interval": 3600,
        "max_backups": 10,
        "compression": true
    },
    "paths": {
        "backup_dir": "./backups",
        "temp_dir": "./temp",
        "logs_dir": "./logs"
    }
}'''),
            ('config/system_config.json', '''{
    "system": {
        "name": "backup-bygod",
        "version": "1.0.0",
        "description": "One-click backup and restore system"
    },
    "features": {
        "auto_backup": true,
        "incremental_backup": true,
        "compression": true,
        "encryption": false
    }
}'''),
            ('config/user_preferences.json', '''{
    "user_settings": {
        "language": "th",
        "theme": "dark",
        "notifications": true
    },
    "backup_preferences": {
        "include_hidden_files": false,
        "exclude_patterns": ["*.tmp", "*.log"],
        "compression_level": 6
    }
}'''),
            ('config/system.json', self.get_system_config()),
            ('config/chrome.json', self.get_chrome_config()),
            ('config/ai.json', self.get_ai_config()),
            ('docs/__init__.py', '"""Documentation modules"""'),
            ('docs/README.md', '''# Backup-bygod System Documentation

## Overview
‡∏£‡∏∞‡∏ö‡∏ö backup ‡πÅ‡∏•‡∏∞ restore ‡πÅ‡∏ö‡∏ö one-click ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏•‡∏∞ parallel processing

## Features
- Auto backup
- Incremental backup
- Parallel processing
- AI-powered optimization
- GPU acceleration support

## Installation
```bash
python setup.py install
```

## Usage
```bash
python launch.py
```
'''),
            ('docs/API.md', '''# API Documentation

## BackupController
- `create_backup(source_path, backup_name)`: ‡∏™‡∏£‡πâ‡∏≤‡∏á backup
- `restore_backup(backup_path, target_path)`: ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô backup

## RestoreController
- `restore_system(backup_path, target_path)`: ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

## SystemMonitor
- `check_system_health()`: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
'''),
            ('docs/TROUBLESHOOTING.md', '''# Troubleshooting Guide

## Common Issues

### 1. Permission Denied
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
- ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ administrator privileges

### 2. Disk Space Full
- ‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà disk

### 3. Backup Failed
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö source path
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö disk space
- ‡∏î‡∏π error logs
'''),
            ('docs/INSTALLATION.md', self.get_installation_guide()),
            ('docs/USAGE.md', self.get_usage_guide()),
            ('tools/__init__.py', '"""Tools modules"""'),
            ('tools/setup.py', self.get_setup_script()),
            ('tools/install_dependencies.py', self.get_install_script()),
            ('tools/backup_tool.py', '''"""
Backup Tool - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ backup ‡πÅ‡∏ö‡∏ö command line
"""
import argparse
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from core.backup_controller import BackupController

def main():
    parser = argparse.ArgumentParser(description='Backup Tool')
    parser.add_argument('source', help='Source path to backup')
    parser.add_argument('--name', help='Backup name')
    
    args = parser.parse_args()
    
    controller = BackupController()
    result = controller.create_backup(args.source, args.name)
    print(f"Backup created: {result}")

if __name__ == "__main__":
    main()
'''),
            ('tools/restore_tool.py', '''"""
Restore Tool - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ restore ‡πÅ‡∏ö‡∏ö command line
"""
import argparse
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from core.restore_controller import RestoreController

def main():
    parser = argparse.ArgumentParser(description='Restore Tool')
    parser.add_argument('backup_path', help='Backup path to restore')
    parser.add_argument('target_path', help='Target path to restore to')
    
    args = parser.parse_args()
    
    controller = RestoreController()
    result = controller.restore_system(args.backup_path, args.target_path)
    
    if result:
        print("Restore successful!")
    else:
        print("Restore failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
'''),
            ('data/__init__.py', '"""Data modules"""'),
            ('data/sample_commands.json', self.get_sample_commands()),
            ('data/backup_history.json', '''{
    "backups": [],
    "last_backup": null,
    "total_backups": 0
}'''),
            ('logs/__init__.py', '"""Logs modules"""'),
            ('temp/__init__.py', '"""Temporary files"""'),
            ('screenshots/__init__.py', '"""Screenshots directory"""'),
            ('backups/__init__.py', '"""Backups directory"""')
        ]
        
        file_specs = [(path, content) for path, content in support_files]
        results = await self.file_processor.create_multiple_files_parallel(file_specs)
        
        success_count = sum(1 for r in results if not isinstance(r, Exception))
        self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{len(support_files)}")
    
    async def create_master_package(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°"""
        self.logger.info("üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°...")
        
        package_content = self.get_master_package_content()
        package_path = Path("run_system.py")
        
        with open(package_path, 'w', encoding='utf-8') as f:
            f.write(package_content)
        
        self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°: run_system.py")
    
    async def create_one_click_launcher(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        self.logger.info("üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß...")
        
        launcher_content = self.get_one_click_launcher_content()
        launcher_path = Path("launch.py")
        
        with open(launcher_path, 'w', encoding='utf-8') as f:
            f.write(launcher_content)
        
        self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: launch.py")
    
    def get_visual_recognition_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Visual Recognition"""
        return '''
"""
Visual Recognition Controller
‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û
"""

import cv2
import numpy as np
from PIL import Image
import easyocr
from typing import List, Dict, Any

class VisualRecognition:
    def __init__(self):
        self.ocr_reader = easyocr.Reader(['th', 'en'])
        
    def analyze_screenshot(self, image_path: str) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå screenshot"""
        # OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        texts = self.ocr_reader.readtext(image_path)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ
        image = cv2.imread(image_path)
        colors = self.analyze_colors(image)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö elements
        elements = self.detect_elements(image)
        
        return {
            'texts': texts,
            'colors': colors,
            'elements': elements
        }
        
    def analyze_colors(self, image):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ"""
        # Logic ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ
        pass
        
    def detect_elements(self, image):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö elements"""
        # Logic ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö elements
        pass
'''
    
    def get_config_manager_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Config Manager"""
        return '''
"""
Configuration Manager
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import json
from pathlib import Path
from typing import Dict, Any

class ConfigManager:
    def __init__(self):
        self.config_dir = Path("config")
        self.configs = {}
        self.load_all_configs()
        
    def load_all_configs(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        config_files = ['system.json', 'chrome.json', 'ai.json']
        
        for config_file in config_files:
            config_path = self.config_dir / config_file
            if config_path.exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    self.configs[config_file.replace('.json', '')] = json.load(f)
                    
    def get_config(self, name: str) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        return self.configs.get(name, {})
        
    def update_config(self, name: str, config: Dict[str, Any]):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        self.configs[name] = config
        self.save_config(name)
        
    def save_config(self, name: str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_path = self.config_dir / f"{name}.json"
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(self.configs[name], f, indent=2, ensure_ascii=False)
'''
    
    def get_requirements_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Requirements"""
        return '''# AI-Powered Chrome Automation System Requirements
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤

# Core Dependencies
selenium==4.18.1
webdriver-manager==4.0.1
pyautogui==0.9.54
opencv-python==4.11.0.86
pillow==11.2.1
numpy==2.2.6

# AI & Machine Learning
openai==1.58.1
transformers==4.53.0
torch==2.7.1
torchvision==0.22.1
sentence-transformers==5.0.0

# Thai Language Processing
pythainlp==5.1.2
easyocr==1.7.2
thai-segmenter==0.4.2

# Utilities
requests==2.31.0
beautifulsoup4==4.12.3
lxml==5.2.1
python-dotenv==1.0.1
aiofiles==23.2.1

# Image Processing
scikit-image==0.25.2
scipy==1.15.3

# Data Processing
pandas==2.2.2
matplotlib==3.9.1
seaborn==0.13.2

# Testing
pytest==8.2.2
pytest-html==4.1.1

# Development
black==24.1.1
flake8==7.0.0
mypy==1.8.0
'''
    
    def get_readme_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö README"""
        return '''# üöÄ AI-Powered Chrome Automation System

## üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤

### ‚ö° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
```bash
# ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
python run_system.py

# ‡∏´‡∏£‡∏∑‡∏≠
python launch.py
```

### üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
- ‚úÖ Chrome Automation 100%
- ‚úÖ Thai Language Support
- ‚úÖ AI Integration
- ‚úÖ Visual Recognition
- ‚úÖ Natural Language Commands
- ‚úÖ Parallel Processing
- ‚úÖ Smart Templates

### üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
- **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö:** 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤)
- **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:** 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
- **‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:** ‡πÅ‡∏ö‡∏ö Real-time

### üáπüá≠ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
- OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

### üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
- **AI-Powered Generator** - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI
- **Parallel Processor** - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
- **Smart Templates** - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

### üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
```
backup-bygod/
‚îú‚îÄ‚îÄ üéØ run_system.py           # ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
‚îú‚îÄ‚îÄ üöÄ launch.py               # ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
‚îú‚îÄ‚îÄ üìÅ core/                   # ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
‚îú‚îÄ‚îÄ üìÅ config/                 # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
‚îú‚îÄ‚îÄ üìÅ docs/                   # ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
‚îú‚îÄ‚îÄ üìÅ tools/                  # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
‚îî‚îÄ‚îÄ üìÅ data/                   # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
```

### üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
```bash
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
pip install -r requirements.txt

# ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
python run_system.py
```

### üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
```python
# ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
"‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Google"
"‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á username"
"‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"
```

---
**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - AI ‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå** üß†
**‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô: ‡∏Ñ‡∏∏‡∏ì** üëë
'''
    
    def get_system_config(self) -> str:
        """Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
        return '''{
  "system": {
    "name": "AI-Powered Chrome Automation System",
    "version": "1.0.0",
    "created_by": "WAWA",
    "auto_start": true,
    "parallel_processing": true
  },
  "chrome": {
    "headless": false,
    "timeout": 30,
    "window_size": "1920x1080",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
  },
  "ai": {
    "enabled": true,
    "provider": "openai",
    "model": "gpt-4-vision-preview",
    "max_tokens": 1000,
    "temperature": 0.7
  },
  "thai": {
    "enabled": true,
    "ocr_confidence": 0.5,
    "language": ["th", "en"],
    "commands": {
      "‡πÄ‡∏õ‡∏¥‡∏î": "open",
      "‡∏õ‡∏¥‡∏î": "close",
      "‡∏Ñ‡∏•‡∏¥‡∏Å": "click",
      "‡∏û‡∏¥‡∏°‡∏û‡πå": "type",
      "‡πÑ‡∏õ‡∏ó‡∏µ‡πà": "navigate"
    }
  },
  "logging": {
    "level": "INFO",
    "file_rotation": true,
    "max_size": "10MB"
  }
}'''
    
    def get_chrome_config(self) -> str:
        """Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome"""
        return '''{
  "browser": {
    "name": "chrome",
    "version": "latest",
    "headless": false,
    "timeout": 30
  },
  "options": {
    "no_sandbox": true,
    "disable_dev_shm_usage": true,
    "disable_gpu": false,
    "window_size": "1920x1080"
  },
  "wait": {
    "implicit": 10,
    "explicit": 30,
    "page_load": 60
  },
  "screenshots": {
    "auto_save": true,
    "format": "png",
    "quality": 90
  }
}'''
    
    def get_ai_config(self) -> str:
        """Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI"""
        return '''{
  "openai": {
    "api_key": "",
    "model": "gpt-4-vision-preview",
    "max_tokens": 1000,
    "temperature": 0.7
  },
  "vision": {
    "enabled": true,
    "max_image_size": "20MB",
    "supported_formats": ["png", "jpg", "jpeg"]
  },
  "analysis": {
    "element_detection": true,
    "text_extraction": true,
    "color_analysis": true
  },
  "commands": {
    "natural_language": true,
    "thai_support": true,
    "auto_translate": true
  }
}'''
    
    def get_installation_guide(self) -> str:
        """‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"""
        return '''# üì¶ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

## üöÄ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI-Powered Chrome Automation

### üìã ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î
- Python 3.8+
- Chrome Browser
- Cursor IDE

### üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

#### 1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies
```bash
pip install -r requirements.txt
```

#### 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys
```bash
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env
echo "OPENAI_API_KEY=your_api_key_here" > .env
```

#### 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
```bash
python -c "import selenium, openai, pythainlp; print('‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')"
```

### üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
```bash
python run_system.py
```

### üîç ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chrome version
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies

---
**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA** üß†
'''
    
    def get_usage_guide(self) -> str:
        """‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        return '''# üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

## üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI-Powered Chrome Automation

### üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
```bash
python run_system.py
```

### üáπüá≠ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
```
"‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Google"
"‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á username"
"‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"
"‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏î‡∏π‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤"
```

### üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏•‡∏±‡∏Å

#### 1. Chrome Automation
- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î browser
- ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL
- ‡∏Ñ‡∏•‡∏¥‡∏Å elements
- ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°

#### 2. Thai Language Support
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢
- OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏ó‡∏¢

#### 3. AI Integration
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
- ‡∏´‡∏≤ elements ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥

#### 4. Visual Recognition
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö elements
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ
- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

### üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
```python
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
from core.config_manager import ConfigManager

config = ConfigManager()
config.update_config('chrome', {'headless': True})
```

### üìä ‡∏Å‡∏≤‡∏£ Monitor
- ‡∏î‡∏π logs ‡πÉ‡∏ô logs/system.log
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö screenshots ‡πÉ‡∏ô screenshots/
- ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô data/

---
**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA** üß†
'''
    
    def get_setup_script(self) -> str:
        """Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setup"""
        return '''#!/usr/bin/env python3
"""
Setup Script - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
"""

import os
import sys
import subprocess
from pathlib import Path

def install_dependencies():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
    print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
    subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])

def setup_environment():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"""
    print("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    directories = ['logs', 'screenshots', 'data', 'temp']
    for dir_name in directories:
        Path(dir_name).mkdir(exist_ok=True)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    env_file = Path('.env')
    if not env_file.exists():
        with open(env_file, 'w') as f:
            f.write("# AI-Powered Chrome Automation Environment\\n")
            f.write("OPENAI_API_KEY=your_api_key_here\\n")

def test_installation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
    
    try:
        import selenium
        import openai
        import pythainlp
        import easyocr
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True
    except ImportError as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI-Powered Chrome Automation")
    print("‚ö° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
    install_dependencies()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    setup_environment()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    if test_installation():
        print("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("‡∏£‡∏±‡∏ô: python run_system.py")
    else:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
'''
    
    def get_install_script(self) -> str:
        """Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö install dependencies"""
        return '''#!/usr/bin/env python3
"""
Install Dependencies Script
"""

import subprocess
import sys
import time

def install_package(package):
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies...")
    
    packages = [
        "selenium==4.18.1",
        "openai==1.58.1",
        "pythainlp==5.1.2",
        "easyocr==1.7.2",
        "opencv-python==4.11.0.86",
        "pyautogui==0.9.54",
        "transformers==4.53.0",
        "torch==2.7.1"
    ]
    
    success_count = 0
    for package in packages:
        print(f"üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package}...")
        if install_package(package):
            print(f"‚úÖ {package} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            success_count += 1
        else:
            print(f"‚ùå {package} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        time.sleep(1)
    
    print(f"üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{len(packages)}")
    
    if success_count == len(packages):
        print("üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    else:
        print("‚ö†Ô∏è ‡∏ö‡∏≤‡∏á packages ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if __name__ == "__main__":
    main()
'''
    
    def get_sample_commands(self) -> str:
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        return '''{
  "thai_commands": [
    "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Google",
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
    "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á username",
    "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠",
    "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏î‡∏π‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤",
    "‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡∏ô‡∏µ‡πâ",
    "‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà",
    "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"
  ],
  "english_commands": [
    "open website Google",
    "click search button",
    "fill username field",
    "take screenshot",
    "scroll down",
    "close tab",
    "open new tab",
    "go back to home"
  ],
  "ai_commands": [
    "analyze this page",
    "find login button",
    "detect form fields",
    "read text from image",
    "identify elements"
  ]
}'''
    
    def get_master_package_content(self) -> str:
        """‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°"""
        return '''"""
Master Package - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

def install_dependencies():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
    print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except subprocess.CalledProcessError:
        print("‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return False
    return True

def setup_environment():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"""
    print("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...")
    os.environ.setdefault("PYTHONPATH", str(Path(__file__).parent))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    directories = ['logs', 'screenshots', 'data', 'temp']
    for dir_name in directories:
        Path(dir_name).mkdir(exist_ok=True)

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ AI-Powered Chrome Automation System")
    print("‚ö° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
    print("üëë ‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô: ‡∏Ñ‡∏∏‡∏ì")
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
    if not install_dependencies():
        return 1
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    setup_environment()
    
    try:
        # Import ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        from master_controller import ChromeAutomationMaster
        
        master = ChromeAutomationMaster()
        await master.initialize_all_controllers()
        
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
        print("üáπüá≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠
        await master.run_system()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
'''
    
    def get_one_click_launcher_content(self) -> str:
        """‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        return '''"""
One-Click Launcher - ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

class OneClickLauncher:
    def __init__(self):
        self.system_name = "AI-Powered Chrome Automation System"
        self.version = "1.0.0"
        self.creator = "WAWA"
        
    async def launch(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üéØ One-Click Launcher")
        print(f"üöÄ {self.system_name} v{self.version}")
        print(f"üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ {self.creator}")
        print("üëë ‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô: ‡∏Ñ‡∏∏‡∏ì")
        print("=" * 50)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
        if not self.check_dependencies():
            print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
            if not self.install_dependencies():
                return 1
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
        self.setup_environment()
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        return await self.run_main_system()
    
    def check_dependencies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies"""
        try:
            import selenium
            import openai
            import pythainlp
            return True
        except ImportError:
            return False
    
    def install_dependencies(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
            return True
        except subprocess.CalledProcessError:
            return False
    
    def setup_environment(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"""
        print("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...")
        os.environ.setdefault("PYTHONPATH", str(Path(__file__).parent))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        for dir_name in ['logs', 'screenshots', 'data', 'temp']:
            Path(dir_name).mkdir(exist_ok=True)
    
    async def run_main_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
            
            # Import ‡∏£‡∏∞‡∏ö‡∏ö
            from master_controller import ChromeAutomationMaster
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
            master = ChromeAutomationMaster()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô controllers
            await master.initialize_all_controllers()
            
            print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            print("üáπüá≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
            print("üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
            print("   - ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Google")
            print("   - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            print("   - ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
            
            # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠
            await master.run_system()
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return 1
        
        return 0

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    launcher = OneClickLauncher()
    return await launcher.launch()

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
'''

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async def build_backup_system():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö backup-bygod"""
    builder = MasterSystemBuilder()
    await builder.build_complete_backup_system()

if __name__ == "__main__":
    asyncio.run(build_backup_system()) 