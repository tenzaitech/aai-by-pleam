"""
üéÆ INTERACTIVE SYSTEM
‡∏£‡∏∞‡∏ö‡∏ö interactive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô backup-bygod ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
"""

import asyncio
import sys
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional
import time
from alldata_godmode.god_mode_knowledge_manager import GodModeKnowledgeManager
import traceback

# Fix Windows console encoding
if sys.platform == "win32":
    try:
        os.system('chcp 65001 >nul')
    except:
        pass

class InteractiveSystem:
    def __init__(self):
        self.running = False
        self.components = {}
        self.config = self.load_config()
        self.godmode_km = GodModeKnowledgeManager()
        self.godmode_session_id = None
        
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_path = Path("config/system.json")
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"system": {"name": "Interactive backup-bygod", "version": "2.0.0"}}
        
    async def initialize_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Interactive System...")
        
        try:
            # Import components
            from core.chrome_controller import AIChromeController
            from core.thai_processor import FullThaiProcessor
            from core.ai_integration import MultimodalAIIntegration
            from core.visual_recognition import VisualRecognition
            from core.backup_controller import BackupController
            
            # Initialize components
            print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
            
            # Chrome Controller
            try:
                api_key = os.getenv("OPENAI_API_KEY", "")
                self.chrome_controller = AIChromeController(api_key)
                # ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                # await self.chrome_controller.start_ai_browser(headless=False)
                self.components["chrome"] = self.chrome_controller
                print("‚úÖ Chrome Controller ‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° browser)")
            except Exception as e:
                print(f"‚ùå Chrome Controller ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            # Thai Processor
            try:
                self.thai_processor = FullThaiProcessor()
                self.components["thai"] = self.thai_processor
                print("‚úÖ Thai Processor ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                print(f"‚ùå Thai Processor ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            # AI Integration
            try:
                api_key = os.getenv("OPENAI_API_KEY")
                self.ai_integration = MultimodalAIIntegration(api_key)
                self.components["ai"] = self.ai_integration
                print("‚úÖ AI Integration ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                print(f"‚ùå AI Integration ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            # Visual Recognition
            try:
                self.visual_recognition = VisualRecognition()
                self.components["visual"] = self.visual_recognition
                print("‚úÖ Visual Recognition ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                print(f"‚ùå Visual Recognition ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            # Backup Controller
            try:
                self.backup_controller = BackupController()
                self.components["backup"] = self.backup_controller
                print("‚úÖ Backup Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                print(f"‚ùå Backup Controller ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            self.running = True
            print(f"üìä Components ‡∏û‡∏£‡πâ‡∏≠‡∏°: {len(self.components)}/5")
            print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {e}")
            return False
            
        return True
        
    def show_menu(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"""
        print("\n" + "="*50)
        print("üéÆ INTERACTIVE backup-bygod SYSTEM")
        print("="*50)
        print("1. üåê Chrome Automation")
        print("2. üáπüá≠ Thai Language Processing")
        print("3. ü§ñ AI Integration")
        print("4. üëÅÔ∏è Visual Recognition")
        print("5. üíæ Backup & Restore")
        print("6. üìä System Status")
        print("7. üîß System Settings")
        print("8. üöÄ Run All Tests")
        print("0. üõë Exit")
        print("="*50)
        
    async def chrome_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π Chrome Automation"""
        while True:
            print("\nüåê Chrome Automation Menu:")
            print("1. ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome Browser")
            print("2. ‡∏õ‡∏¥‡∏î Chrome Browser")
            print("3. Force Restart Chrome Browser")
            print("4. ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Chrome Browser")
            print("5. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
            print("6. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("7. ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            print("8. ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
            print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                try:
                    print("üîç DEBUG: User selected 'Start Chrome Browser'")
                    await self.start_chrome_browser(headless=False)
                except Exception as e:
                    print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                    import traceback
                    print(f"üîç DEBUG: Full traceback: {traceback.format_exc()}")
            elif choice == "2":
                try:
                    await self.stop_chrome_browser()
                except Exception as e:
                    print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "3":
                try:
                    print("üîÑ Force Restart Chrome Browser...")
                    await self.start_chrome_browser(headless=False, force_restart=True)
                except Exception as e:
                    print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "4":
                try:
                    status = await self.get_chrome_status()
                    print(f"üìä Chrome Status:")
                    print(f"   Driver Active: {'‚úÖ' if status['driver_active'] else '‚ùå'}")
                    print(f"   Initializing: {'üîÑ' if status['is_initializing'] else '‚è∏Ô∏è'}")
                    print(f"   Session ID: {status['session_id']}")
                    print(f"   Last Activity: {status['last_activity']}")
                except Exception as e:
                    print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "5":
                if not hasattr(self.chrome_controller, 'driver') or not self.chrome_controller.driver:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome Browser ‡∏Å‡πà‡∏≠‡∏ô")
                    continue
                url = input("‡πÉ‡∏™‡πà URL: ").strip()
                if url:
                    try:
                        await self.chrome_controller.ai_navigate(url, f"‡πÄ‡∏õ‡∏¥‡∏î {url}")
                        print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î {url} ‡πÅ‡∏•‡πâ‡∏ß")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "6":
                if not hasattr(self.chrome_controller, 'driver') or not self.chrome_controller.driver:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome Browser ‡∏Å‡πà‡∏≠‡∏ô")
                    continue
                query = input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£: ").strip()
                if query:
                    try:
                        await self.chrome_controller.ai_navigate("https://www.google.com", f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ {query}")
                        print(f"‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ {query} ‡πÅ‡∏•‡πâ‡∏ß")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "7":
                if not hasattr(self.chrome_controller, 'driver') or not self.chrome_controller.driver:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome Browser ‡∏Å‡πà‡∏≠‡∏ô")
                    continue
                print("ü§ñ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
                # Add automation logic here
            elif choice == "8":
                if not hasattr(self.chrome_controller, 'driver') or not self.chrome_controller.driver:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome Browser ‡∏Å‡πà‡∏≠‡∏ô")
                    continue
                print("üëÅÔ∏è ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")
                # Add screenshot logic here
                
    async def thai_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π Thai Language Processing"""
        while True:
            print("\nüáπüá≠ Thai Language Processing Menu:")
            print("1. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
            print("2. OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û")
            print("3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                text = input("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ").strip()
                if text:
                    try:
                        # Use thai processor
                        print(f"üìù ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {text}")
                        print("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "2":
                print("üì∑ OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û...")
                # Add OCR logic here
            elif choice == "3":
                print("üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
                # Add text conversion logic here
                
    async def ai_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π AI Integration"""
        while True:
            print("\nü§ñ AI Integration Menu:")
            print("1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            print("2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û")
            print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            print("4. ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
            print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                text = input("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ").strip()
                if text:
                    try:
                        print(f"üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {text}")
                        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "2":
                print("üñºÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û...")
                # Add image analysis logic here
            elif choice == "3":
                prompt = input("‡πÉ‡∏™‡πà prompt: ").strip()
                if prompt:
                    try:
                        print(f"‚úçÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å: {prompt}")
                        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "4":
                question = input("‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£: ").strip()
                if question:
                    try:
                        print(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
                        print("‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                        
    async def visual_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π Visual Recognition"""
        while True:
            print("\nüëÅÔ∏è Visual Recognition Menu:")
            print("1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
            print("2. ‡∏´‡∏≤ elements")
            print("3. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û")
            print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                print("üñ•Ô∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")
                # Add screen analysis logic here
            elif choice == "2":
                print("üîç ‡∏´‡∏≤ elements...")
                # Add element detection logic here
            elif choice == "3":
                print("üîÑ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û...")
                # Add image comparison logic here
                
    async def backup_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π Backup & Restore"""
        while True:
            print("\nüíæ Backup & Restore Menu:")
            print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á backup")
            print("2. Restore backup")
            print("3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup")
            print("4. ‡∏•‡∏ö backup")
            print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                source = input("‡πÉ‡∏™‡πà path ‡∏ó‡∏µ‡πà‡∏à‡∏∞ backup: ").strip()
                if source:
                    try:
                        print(f"üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏à‡∏≤‡∏Å: {source}")
                        # Add backup logic here
                        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "2":
                backup_name = input("‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ backup ‡∏ó‡∏µ‡πà‡∏à‡∏∞ restore: ").strip()
                if backup_name:
                    try:
                        print(f"üîÑ Restore backup: {backup_name}")
                        # Add restore logic here
                        print("‚úÖ Restore ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            elif choice == "3":
                print("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup:")
                # Add list backup logic here
            elif choice == "4":
                backup_name = input("‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ backup ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ").strip()
                if backup_name:
                    try:
                        print(f"üóëÔ∏è ‡∏•‡∏ö backup: {backup_name}")
                        # Add delete backup logic here
                        print("‚úÖ ‡∏•‡∏ö backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    except Exception as e:
                        print(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                        
    def system_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\nüìä System Status:")
        print(f"üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {'‚úÖ' if self.running else '‚ùå'}")
        print(f"üìã Components: {len(self.components)}/5")
        
        for name, component in self.components.items():
            status = "‚úÖ" if component else "‚ùå"
            print(f"   {name}: {status}")
            
        print(f"‚öôÔ∏è Config: {self.config['system']['name']} v{self.config['system']['version']}")
        
    async def run_all_tests(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\nüöÄ ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        tests = [
            ("Chrome Test", self.test_chrome),
            ("Thai Test", self.test_thai),
            ("AI Test", self.test_ai),
            ("Visual Test", self.test_visual),
            ("Backup Test", self.test_backup)
        ]
        
        for test_name, test_func in tests:
            try:
                print(f"üîÑ {test_name}...")
                await test_func()
                print(f"‚úÖ {test_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                print(f"‚ùå {test_name} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    async def test_chrome(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome"""
        if "chrome" in self.components:
            await self.chrome_controller.ai_navigate("https://www.google.com", "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome")
            
    async def test_thai(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor"""
        if "thai" in self.components:
            print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor")
            
    async def test_ai(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration"""
        if "ai" in self.components:
            print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration")
            
    async def test_visual(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Visual Recognition"""
        if "visual" in self.components:
            print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö Visual Recognition")
            
    async def test_backup(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backup Controller"""
        if "backup" in self.components:
            print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backup Controller")
            
    async def start_chrome_browser(self, headless=False, force_restart=False):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome browser ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        import traceback
        import threading
        
        # DEBUG: Log caller information
        caller_frame = traceback.extract_stack()[-2]
        print(f"üîç DEBUG: start_chrome_browser called from {caller_frame.filename}:{caller_frame.lineno}")
        print(f"üîç DEBUG: Thread ID: {threading.current_thread().ident}")
        print(f"üîç DEBUG: headless={headless}, force_restart={force_restart}")
        print(f"üîç DEBUG: chrome in components: {'chrome' in self.components}")
        
        if "chrome" in self.components:
            print("üîç DEBUG: Calling chrome_controller.start_ai_browser...")
            success = await self.chrome_controller.start_ai_browser(headless=headless)
            if success:
                print("‚úÖ Chrome browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome browser ‡πÑ‡∏î‡πâ")
                return False
        else:
            print("‚ùå Chrome Controller ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False
            
    async def stop_chrome_browser(self):
        """‡∏õ‡∏¥‡∏î Chrome browser - DISABLED"""
        if "chrome" in self.components:
            print(f"[DEBUG] stop_chrome_browser() called from: {traceback.format_stack()}")
            # self.chrome_controller.cleanup()  # DISABLED - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            print("üîå Chrome browser cleanup disabled by user preference")
            
    async def get_chrome_status(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Chrome browser"""
        if "chrome" in self.components:
            return self.chrome_controller.get_status()
        return {'driver_active': False, 'is_initializing': False, 'last_activity': 0, 'session_id': None}
            
    async def run(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö interactive"""
        if not await self.initialize_system():
            return
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° session godmode ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î godauto/godmode
        self.godmode_session_id = self.godmode_km.start_session()
        try:
            while True:
                try:
                    self.show_menu()
                    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ").strip()
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å command ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    self.godmode_km.save_command(self.godmode_session_id, f"menu_choice:{choice}", "menu", True, "User selected menu")
                    if choice == "0":
                        print("üõë ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...")
                        break
                    elif choice == "1":
                        await self.chrome_menu()
                    elif choice == "2":
                        await self.thai_menu()
                    elif choice == "3":
                        await self.ai_menu()
                    elif choice == "4":
                        await self.visual_menu()
                    elif choice == "5":
                        await self.backup_menu()
                    elif choice == "6":
                        self.system_status()
                    elif choice == "7":
                        print("üîß System Settings (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)")
                    elif choice == "8":
                        await self.run_all_tests()
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except KeyboardInterrupt:
                    print("\nüõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                    break
                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                    self.godmode_km.save_command(self.godmode_session_id, f"error:{e}", "error", False, str(e))
        finally:
            # ‡∏à‡∏ö session godmode
            self.godmode_km.end_session(self.godmode_session_id)
        print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        
async def main():
    """Main function"""
    system = InteractiveSystem()
    await system.run()
    
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}") 