#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Master Controller for Backup-byGod
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import asyncio
import json
import logging
import os
import sys
from pathlib import Path
from typing import Dict, Any
import traceback

# Import components with error handling
try:
    from performance_optimizer import PerformanceOptimizer
except ImportError:
    PerformanceOptimizer = None
    logging.warning("PerformanceOptimizer not available")

try:
    from enhanced_integration import FullSystemIntegration
except ImportError:
    FullSystemIntegration = None
    logging.warning("FullSystemIntegration not available")

try:
    from smart_batcher import SmartBatcher, BatchJob
except ImportError:
    SmartBatcher = None
    BatchJob = None
    logging.warning("SmartBatcher not available")

try:
    from core.backup_controller import BackupController
except ImportError:
    BackupController = None
    logging.warning("BackupController not available")

class FullSystemLauncher:
    def __init__(self):
        self.logger = self.setup_logger()
        self.config = self.load_config()
        self.status = {"running": False, "components": {}}
        
    def setup_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "system.log"),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
        
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_path = Path("config/system.json")
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.logger.error(f"Error loading config: {e}")
        return self.get_default_config()
        
    def get_default_config(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        return {
            "system": {
                "name": "AI-Powered Chrome Automation",
                "version": "1.0.0",
                "auto_start": True
            },
            "chrome": {
                "headless": True,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô True
                "timeout": 30,
                "window_size": "1920x1080"
            },
            "ai": {
                "enabled": True,
                "provider": "openai",
                "model": "gpt-4-vision-preview"
            },
            "thai": {
                "enabled": True,
                "ocr_confidence": 0.5
            },
            "logging": {
                "level": "INFO",
                "file_rotation": True
            }
        }
        
    async def initialize_components(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
        
        components = [
            ("Chrome Controller", self.init_chrome),
            ("Thai Processor", self.init_thai),
            ("AI Integration", self.init_ai),
            ("Visual Recognition", self.init_visual)
        ]
        
        for name, init_func in components:
            try:
                await init_func()
                self.status["components"][name] = "ready"
                self.logger.info(f"‚úÖ {name} ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                self.status["components"][name] = "error"
                self.logger.error(f"‚ùå {name} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
    async def init_chrome(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome Controller"""
        try:
            # ‡πÉ‡∏ä‡πâ Singleton
            from core.chrome_controller import AIChromeController
            api_key = os.getenv("OPENAI_API_KEY", "")
            self.chrome_controller = AIChromeController(api_key)
            # ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
            # await self.chrome_controller.start_ai_browser(
            #     headless=self.config["chrome"]["headless"]
            # )
            self.logger.info("‚úÖ Chrome Controller ‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° browser)")
        except Exception as e:
            self.logger.error(f"‚ùå Chrome Controller error: {e}")
            raise
        
    async def start_chrome_browser(self, headless=True, force_restart=False):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome browser ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        if hasattr(self, 'chrome_controller'):
            try:
                success = await self.chrome_controller.start_ai_browser(headless=headless)
                if success:
                    self.logger.info("‚úÖ Chrome browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                    return True
                else:
                    self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome browser ‡πÑ‡∏î‡πâ")
                    return False
            except Exception as e:
                self.logger.error(f"‚ùå Chrome browser error: {e}")
                return False
        else:
            self.logger.error("‚ùå Chrome Controller ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False
            
    async def stop_chrome_browser(self):
        """‡∏õ‡∏¥‡∏î Chrome browser - DISABLED"""
        if hasattr(self, 'chrome_controller'):
            try:
                self.logger.debug(f"[DEBUG] stop_chrome_browser() called from: {traceback.format_stack()}")
                # self.chrome_controller.cleanup()  # DISABLED - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                self.logger.info("üîå Chrome browser cleanup disabled by user preference")
            except Exception as e:
                self.logger.error(f"‚ùå Chrome cleanup error: {e}")
        
    async def get_chrome_status(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Chrome browser"""
        if hasattr(self, 'chrome_controller'):
            return self.chrome_controller.get_status()
        return {'driver_active': False, 'is_initializing': False, 'last_activity': 0, 'session_id': None}
        
    async def init_thai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Thai Processor"""
        try:
            from core.thai_processor import FullThaiProcessor
            self.thai_processor = FullThaiProcessor()
        except Exception as e:
            self.logger.error(f"‚ùå Thai Processor error: {e}")
            raise
            
    async def init_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Integration"""
        if self.config["ai"]["enabled"]:
            try:
                from core.ai_integration import MultimodalAIIntegration
                api_key = os.getenv("OPENAI_API_KEY")
                # ‡πÉ‡∏ä‡πâ AI Integration ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key (‡∏à‡∏∞‡πÉ‡∏ä‡πâ Local Processing)
                self.ai_integration = MultimodalAIIntegration(api_key)
            except Exception as e:
                self.logger.error(f"‚ùå AI Integration error: {e}")
                raise
        else:
            self.logger.info("AI Integration disabled in config")
            
    async def init_visual(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Visual Recognition"""
        try:
            from core.visual_recognition import VisualRecognition
            self.visual_recognition = VisualRecognition()
        except Exception as e:
            self.logger.error(f"‚ùå Visual Recognition error: {e}")
            raise
        
    async def launch_full_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        self.logger.info(f"üìã ‡∏£‡∏∞‡∏ö‡∏ö: {self.config['system']['name']} v{self.config['system']['version']}")
        
        try:
            # 1. Optimize system ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if PerformanceOptimizer:
                try:
                    optimizer = PerformanceOptimizer()
                    await optimizer.optimize_system()
                except Exception as e:
                    self.logger.warning(f"Performance optimization failed: {e}")

            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
            await self.initialize_components()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            ready_components = sum(1 for status in self.status["components"].values() if status == "ready")
            total_components = len(self.status["components"])
            
            self.logger.info(f"üìä Components ‡∏û‡∏£‡πâ‡∏≠‡∏°: {ready_components}/{total_components}")
            
            if ready_components == total_components:
                self.status["running"] = True
                self.logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
                
                # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
                await self.run_main_system()

                # 3. Integrate Enhanced Integration ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                if FullSystemIntegration:
                    try:
                        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Enhanced Integration Test")
                        enhanced_integration = FullSystemIntegration()
                        integration_results = await enhanced_integration.run_full_integration_test()
                        
                        self.logger.info(f"üìä Enhanced Integration Results:")
                        self.logger.info(f"   - ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {integration_results['total_tasks']}")
                        self.logger.info(f"   - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {integration_results['successful_tasks']}")
                        self.logger.info(f"   - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {integration_results['success_rate']:.1f}%")
                        self.logger.info(f"   - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Parallel: {integration_results['parallel_efficiency']:.2f}x")
                    except Exception as e:
                        self.logger.warning(f"Enhanced Integration failed: {e}")

                # 2. Integrate SmartBatcher ‡∏Å‡∏±‡∏ö logic backup ‡∏à‡∏£‡∏¥‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                if SmartBatcher and BackupController:
                    try:
                        batcher = SmartBatcher(max_concurrent=3)
                        backup_controller = BackupController()
                        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: backup ‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô data/
                        data_dir = Path("data")
                        if data_dir.exists():
                            for item in data_dir.iterdir():
                                if item.is_dir() or item.is_file():
                                    batcher.add_job(BatchJob(
                                        f"Backup {item.name}",
                                        self._backup_job,
                                        (str(item), backup_controller),
                                        priority=1
                                    ))
                            results = await batcher.process_batch()
                            self.logger.info("üìä Batch Results:", results)
                        else:
                            self.logger.info("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backup")
                    except Exception as e:
                        self.logger.warning(f"SmartBatcher failed: {e}")
            else:
                self.logger.warning("‚ö†Ô∏è ‡∏ö‡∏≤‡∏á components ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠")
                await self.run_main_system()
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return 1
            
        return 0
        
    async def run_main_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
        self.logger.info("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        self.logger.info("üåê Chrome Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î browser ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
            
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡πÑ‡∏î‡πâ)
        self.logger.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠...")
        
    def get_system_status(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        return self.status

    @staticmethod
    async def _backup_job(source_path, backup_controller):
        """Backup job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SmartBatcher"""
        if not backup_controller:
            return {"status": "error", "message": "BackupController not available"}
            
        try:
            loop = asyncio.get_event_loop()
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ create_backup ‡πÅ‡∏ö‡∏ö sync ‡πÉ‡∏ô thread pool
            result = await loop.run_in_executor(None, backup_controller.create_backup, source_path)
            return {"status": "success", "result": result}
        except Exception as e:
            return {"status": "error", "message": str(e)}

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        launcher = FullSystemLauncher()
        return await launcher.launch_full_system()
    except Exception as e:
        print(f"‚ùå System startup failed: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
