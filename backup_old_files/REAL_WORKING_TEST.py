#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real Working Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
"""

import sys
import os
import asyncio
import time

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_chrome_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome Controller ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing Chrome Controller - Real Working Test...")
    try:
        from core.chrome_controller import AIChromeController
        controller = AIChromeController()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome
        print("   üîÑ Starting Chrome browser...")
        result = asyncio.run(controller.start_ai_browser(headless=True))
        if not result:
            print("   ‚ùå Failed to start Chrome browser")
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        print("   üîÑ Testing navigation...")
        nav_result = asyncio.run(controller.ai_navigate("https://www.google.com"))
        if not nav_result:
            print("   ‚ùå Failed to navigate to Google")
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
        print("   üîÑ Testing screenshot...")
        try:
            screenshot = controller.driver.get_screenshot_as_png()
            if len(screenshot) > 1000:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£
                print("   ‚úÖ Screenshot taken successfully")
            else:
                print("   ‚ùå Screenshot too small")
                return False
        except Exception as e:
            print(f"   ‚ùå Screenshot failed: {e}")
            return False
        
        print("   ‚úÖ Chrome Controller working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Chrome Controller error: {e}")
        return False

def test_ai_integration_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing AI Integration - Real Working Test...")
    try:
        from core.ai_integration import MultimodalAIIntegration
        ai = MultimodalAIIntegration()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print("   üîÑ Testing text analysis...")
        test_text = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
        result = asyncio.run(ai._analyze_local([], test_text, "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"))
        
        if "Local AI Processing" in result:
            print("   ‚úÖ Text analysis working")
        else:
            print("   ‚ùå Text analysis failed")
            return False
        
        print("   ‚úÖ AI Integration working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå AI Integration error: {e}")
        return False

def test_thai_processor_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing Thai Processor - Real Working Test...")
    try:
        from core.thai_processor import FullThaiProcessor
        processor = FullThaiProcessor()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print("   üîÑ Testing text processing...")
        test_command = "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Google"
        result = processor.process_natural_command(test_command)
        
        if result and 'action' in result:
            print(f"   ‚úÖ Command processed: {result}")
        else:
            print("   ‚ùå Command processing failed")
            return False
        
        print("   ‚úÖ Thai Processor working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Thai Processor error: {e}")
        return False

def test_backup_controller_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backup Controller ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing Backup Controller - Real Working Test...")
    try:
        from core.backup_controller import BackupController
        bc = BackupController()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á backup
        print("   üîÑ Testing backup creation...")
        test_data = {"test": "data", "timestamp": time.time()}
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ method ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if hasattr(bc, 'create_backup'):
            print("   ‚úÖ Backup method available")
        else:
            print("   ‚ùå Backup method not available")
            return False
        
        print("   ‚úÖ Backup Controller working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Backup Controller error: {e}")
        return False

def test_knowledge_manager_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Knowledge Manager ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing Knowledge Manager - Real Working Test...")
    try:
        from core.knowledge_manager import KnowledgeManager
        km = KnowledgeManager()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        print("   üîÑ Testing knowledge addition...")
        test_knowledge = {
            "title": "Test Knowledge",
            "content": "This is a test knowledge entry",
            "category": "test"
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ method ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if hasattr(km, 'add_knowledge_from_text'):
            print("   ‚úÖ Knowledge methods available")
        else:
            print("   ‚ùå Knowledge methods not available")
            return False
        
        print("   ‚úÖ Knowledge Manager working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Knowledge Manager error: {e}")
        return False

def test_godmode_knowledge_real_working():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö God Mode Knowledge ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    print("üîç Testing God Mode Knowledge - Real Working Test...")
    try:
        from alldata_godmode.god_mode_knowledge_manager import GodModeKnowledgeManager
        gkm = GodModeKnowledgeManager()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° session
        print("   üîÑ Testing session creation...")
        session_id = gkm.start_session("test_session")
        
        if session_id:
            print(f"   ‚úÖ Session created: {session_id}")
        else:
            print("   ‚ùå Session creation failed")
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        print("   üîÑ Testing command saving...")
        gkm.save_command(session_id, "test command", "test", True, "test result")
        print("   ‚úÖ Command saved successfully")
        
        print("   ‚úÖ God Mode Knowledge working correctly!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå God Mode Knowledge error: {e}")
        return False

def main():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á"""
    print("üöÄ Backup-byGod Real Working Test")
    print("=" * 60)
    print("This test will verify that each component actually works")
    print("=" * 60)
    
    results = {}
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ component ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á
    results['chrome_controller'] = test_chrome_real_working()
    results['ai_integration'] = test_ai_integration_real_working()
    results['thai_processor'] = test_thai_processor_real_working()
    results['backup_controller'] = test_backup_controller_real_working()
    results['knowledge_manager'] = test_knowledge_manager_real_working()
    results['godmode_knowledge'] = test_godmode_knowledge_real_working()
    
    print("\n" + "=" * 60)
    print("üìä Real Working Test Results:")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for component, result in results.items():
        status = "‚úÖ REALLY WORKS" if result else "‚ùå DOESN'T WORK"
        print(f"   {component}: {status}")
    
    print(f"\nüìà Overall: {passed_tests}/{total_tests} components REALLY work")
    
    if passed_tests == total_tests:
        print("üéâ ALL COMPONENTS REALLY WORK!")
        print("‚úÖ System is ready for real use!")
    else:
        print("‚ö†Ô∏è Some components don't actually work.")
        print("‚ùå System needs more development.")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    main() 