#!/usr/bin/env python3
"""
üéØ WAWAGOD Master Controller - Ultimate AI Automation System
‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å WAWA + Chrome Automation 100%
"""

import asyncio
import logging
import os
import sys
import traceback
from typing import Dict, Any, Optional, List
from datetime import datetime

# Import WAWAGOD Core Controllers
try:
    from core.wawagod_chrome_controller import WAWAGODChromeController
    from core.wawagod_puppeteer_controller import WAWAGODPuppeteerController
    from core.wawagod_selenium_controller import WAWAGODSeleniumController
    from core.wawagod_thai_processor import WAWAGODThaiProcessor
    from core.wawagod_ai_integration import WAWAGODAIIntegration
    from core.wawagod_visual_recognition import WAWAGODVisualRecognition
    from core.wawagod_ocr_processor import WAWAGODOCRProcessor
    from core.wawagod_input_controller import WAWAGODInputController
    from core.wawagod_backup_controller import WAWAGODBackupController
except ImportError as e:
    print(f"‚ö†Ô∏è Import error: {e}")
    print("üîÑ Creating core controllers...")

class WAWAGODMaster:
    """
    üéØ WAWAGOD Master Controller - ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö WAWAGOD
    ‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å WAWA + Chrome Automation 100%
    """
    
    def __init__(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WAWAGOD Master Controller"""
        self.logger = self._setup_logger()
        self.logger.info("üéØ WAWAGOD Master Controller ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        # Controllers
        self.chrome_controller = None
        self.puppeteer_controller = None
        self.selenium_controller = None
        self.thai_processor = None
        self.ai_integration = None
        self.visual_recognition = None
        self.ocr_processor = None
        self.input_controller = None
        self.backup_controller = None
        
        # System Status
        self.system_initialized = False
        self.browser_session_active = False
        self.current_browser_type = None
        
        # Configuration
        self.config = {
            'browser_type': 'puppeteer',  # puppeteer, selenium, hybrid
            'headless': False,
            'thai_language': True,
            'ai_enabled': True,
            'auto_backup': True,
            'debug_mode': True
        }
        
        self.logger.info("‚úÖ WAWAGOD Master Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    def _setup_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('wawagod.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger('WAWAGOD')

    async def initialize_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö WAWAGOD ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö WAWAGOD...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Controllers ‡πÅ‡∏ö‡∏ö Parallel
            await self._create_controllers_parallel()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Controllers
            await self._initialize_controllers()
            
            self.system_initialized = True
            self.logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö WAWAGOD ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
            self.logger.error(traceback.format_exc())
            return False

    async def _create_controllers_parallel(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Controllers ‡πÅ‡∏ö‡∏ö Parallel"""
        self.logger.info("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Controllers ‡πÅ‡∏ö‡∏ö Parallel...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Controllers ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        tasks = [
            self._create_chrome_controller(),
            self._create_puppeteer_controller(),
            self._create_selenium_controller(),
            self._create_thai_processor(),
            self._create_ai_integration(),
            self._create_visual_recognition(),
            self._create_ocr_processor(),
            self._create_input_controller(),
            self._create_backup_controller()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
        self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Controllers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

    async def _create_chrome_controller(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome Controller"""
        try:
            from core.wawagod_chrome_controller import WAWAGODChromeController
            self.chrome_controller = WAWAGODChromeController()
            self.logger.info("‚úÖ Chrome Controller ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Chrome Controller: {e}")

    async def _create_puppeteer_controller(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Puppeteer Controller"""
        try:
            from core.wawagod_puppeteer_controller import WAWAGODPuppeteerController
            self.puppeteer_controller = WAWAGODPuppeteerController()
            self.logger.info("‚úÖ Puppeteer Controller ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Puppeteer Controller: {e}")

    async def _create_selenium_controller(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Selenium Controller"""
        try:
            from core.wawagod_selenium_controller import WAWAGODSeleniumController
            self.selenium_controller = WAWAGODSeleniumController()
            self.logger.info("‚úÖ Selenium Controller ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Selenium Controller: {e}")

    async def _create_thai_processor(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Thai Language Processor"""
        try:
            from core.wawagod_thai_processor import WAWAGODThaiProcessor
            self.thai_processor = WAWAGODThaiProcessor()
            self.logger.info("‚úÖ Thai Language Processor ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Thai Language Processor: {e}")

    async def _create_ai_integration(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á AI Integration"""
        try:
            from core.wawagod_ai_integration import WAWAGODAIIntegration
            self.ai_integration = WAWAGODAIIntegration()
            self.logger.info("‚úÖ AI Integration ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è AI Integration: {e}")

    async def _create_visual_recognition(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Visual Recognition"""
        try:
            from core.wawagod_visual_recognition import WAWAGODVisualRecognition
            self.visual_recognition = WAWAGODVisualRecognition()
            self.logger.info("‚úÖ Visual Recognition ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Visual Recognition: {e}")

    async def _create_ocr_processor(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á OCR Processor"""
        try:
            from core.wawagod_ocr_processor import WAWAGODOCRProcessor
            self.ocr_processor = WAWAGODOCRProcessor()
            self.logger.info("‚úÖ OCR Processor ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è OCR Processor: {e}")

    async def _create_input_controller(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Input Controller"""
        try:
            from core.wawagod_input_controller import WAWAGODInputController
            self.input_controller = WAWAGODInputController()
            self.logger.info("‚úÖ Input Controller ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Input Controller: {e}")

    async def _create_backup_controller(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Backup Controller"""
        try:
            from core.wawagod_backup_controller import WAWAGODBackupController
            self.backup_controller = WAWAGODBackupController()
            self.logger.info("‚úÖ Backup Controller ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Backup Controller: {e}")

    async def _initialize_controllers(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Controllers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Controllers...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Controllers ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if self.thai_processor:
            await self.thai_processor.initialize()
        
        if self.ai_integration:
            await self.ai_integration.initialize()
        
        if self.visual_recognition:
            await self.visual_recognition.initialize()
        
        if self.ocr_processor:
            await self.ocr_processor.initialize()
        
        if self.backup_controller:
            await self.backup_controller.initialize()
        
        self.logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Controllers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

    async def start_browser_session(self, browser_type: str = 'puppeteer', headless: bool = False):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser Session"""
        try:
            self.logger.info(f"üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser Session: {browser_type}")
            
            if browser_type == 'puppeteer' and self.puppeteer_controller:
                await self.puppeteer_controller.start_browser(headless=headless)
                self.current_browser_type = 'puppeteer'
                self.browser_session_active = True
                
            elif browser_type == 'selenium' and self.selenium_controller:
                await self.selenium_controller.start_browser(headless=headless)
                self.current_browser_type = 'selenium'
                self.browser_session_active = True
                
            elif browser_type == 'chrome' and self.chrome_controller:
                await self.chrome_controller.start_browser(headless=headless)
                self.current_browser_type = 'chrome'
                self.browser_session_active = True
                
            else:
                raise Exception(f"Browser type {browser_type} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")
            
            self.logger.info(f"‚úÖ Browser Session ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {browser_type}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser: {e}")
            return False

    async def navigate_to_url(self, url: str):
        """‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL"""
        try:
            self.logger.info(f"üåê ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {url}")
            
            if self.current_browser_type == 'puppeteer' and self.puppeteer_controller:
                await self.puppeteer_controller.navigate_to(url)
            elif self.current_browser_type == 'selenium' and self.selenium_controller:
                await self.selenium_controller.navigate_to(url)
            elif self.current_browser_type == 'chrome' and self.chrome_controller:
                await self.chrome_controller.navigate_to(url)
            else:
                raise Exception("‡πÑ‡∏°‡πà‡∏°‡∏µ Browser Session ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            
            self.logger.info(f"‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {url}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á: {e}")
            return False

    async def smart_click(self, element_description: str):
        """Smart Click ‡∏î‡πâ‡∏ß‡∏¢ AI"""
        try:
            self.logger.info(f"üéØ Smart Click: {element_description}")
            
            # ‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏≤ element
            if self.ai_integration:
                element_info = await self.ai_integration.analyze_element(element_description)
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å element
                if self.current_browser_type == 'puppeteer' and self.puppeteer_controller:
                    await self.puppeteer_controller.click_element(element_info)
                elif self.current_browser_type == 'selenium' and self.selenium_controller:
                    await self.selenium_controller.click_element(element_info)
                elif self.current_browser_type == 'chrome' and self.chrome_controller:
                    await self.chrome_controller.click_element(element_info)
            
            self.logger.info(f"‚úÖ Smart Click ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {element_description}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Smart Click: {e}")
            return False

    async def automated_form_filling(self, form_data: Dict[str, str]):
        """‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        try:
            self.logger.info(f"üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {len(form_data)} fields")
            
            for field_name, value in form_data.items():
                if self.current_browser_type == 'puppeteer' and self.puppeteer_controller:
                    await self.puppeteer_controller.fill_field(field_name, value)
                elif self.current_browser_type == 'selenium' and self.selenium_controller:
                    await self.selenium_controller.fill_field(field_name, value)
                elif self.current_browser_type == 'chrome' and self.chrome_controller:
                    await self.chrome_controller.fill_field(field_name, value)
            
            self.logger.info("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°: {e}")
            return False

    async def comprehensive_screenshot_analysis(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        try:
            self.logger.info("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô...")
            
            # ‡∏ñ‡πà‡∏≤‡∏¢ screenshot
            screenshot_path = await self._take_screenshot()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI
            if self.ai_integration:
                ai_analysis = await self.ai_integration.analyze_screenshot(screenshot_path)
            
            # OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if self.ocr_processor:
                ocr_texts = await self.ocr_processor.extract_text(screenshot_path)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            if self.thai_processor:
                thai_analysis = await self.thai_processor.analyze_text(ocr_texts)
            
            analysis_result = {
                'screenshot_path': screenshot_path,
                'ai_analysis': ai_analysis if 'ai_analysis' in locals() else None,
                'ocr_texts': ocr_texts if 'ocr_texts' in locals() else None,
                'thai_analysis': thai_analysis if 'thai_analysis' in locals() else None,
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.info("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return analysis_result
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: {e}")
            return None

    async def process_thai_command(self, command: str):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        try:
            self.logger.info(f"üáπüá≠ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢: {command}")
            
            if self.thai_processor:
                # ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                english_command = await self.thai_processor.translate_command(command)
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                result = await self._execute_command(english_command)
                
                self.logger.info(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {command}")
                return result
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢: {e}")
            return None

    async def ocr_thai_text(self, image_path: str):
        """OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢"""
        try:
            self.logger.info(f"üáπüá≠ OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢: {image_path}")
            
            if self.ocr_processor:
                thai_texts = await self.ocr_processor.extract_thai_text(image_path)
                self.logger.info(f"‚úÖ OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(thai_texts)} texts")
                return thai_texts
            
            return []
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢: {e}")
            return []

    async def analyze_thai_screenshot(self, screenshot_path: str):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        try:
            self.logger.info(f"üáπüá≠ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: {screenshot_path}")
            
            # OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
            thai_texts = await self.ocr_thai_text(screenshot_path)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI
            if self.ai_integration:
                ai_analysis = await self.ai_integration.analyze_thai_screenshot(screenshot_path, thai_texts)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            if self.thai_processor:
                thai_analysis = await self.thai_processor.analyze_screenshot_content(thai_texts)
            
            analysis_result = {
                'screenshot_path': screenshot_path,
                'thai_texts': thai_texts,
                'ai_analysis': ai_analysis if 'ai_analysis' in locals() else None,
                'thai_analysis': thai_analysis if 'thai_analysis' in locals() else None,
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.info("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return analysis_result
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: {e}")
            return None

    async def _take_screenshot(self):
        """‡∏ñ‡πà‡∏≤‡∏¢ screenshot"""
        try:
            screenshot_path = f"screenshots/wawagod_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            
            if self.current_browser_type == 'puppeteer' and self.puppeteer_controller:
                await self.puppeteer_controller.take_screenshot(screenshot_path)
            elif self.current_browser_type == 'selenium' and self.selenium_controller:
                await self.selenium_controller.take_screenshot(screenshot_path)
            elif self.current_browser_type == 'chrome' and self.chrome_controller:
                await self.chrome_controller.take_screenshot(screenshot_path)
            
            return screenshot_path
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ screenshot: {e}")
            return None

    async def _execute_command(self, command: str):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        try:
            self.logger.info(f"‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}")
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            if "navigate" in command.lower():
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
                url = command.split()[-1]
                return await self.navigate_to_url(url)
            
            elif "click" in command.lower():
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
                element = command.split("click")[-1].strip()
                return await self.smart_click(element)
            
            elif "fill" in command.lower():
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
                # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ form_data
                return True
            
            else:
                self.logger.warning(f"‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: {command}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            return False

    async def stop_browser_session(self):
        """‡∏´‡∏¢‡∏∏‡∏î Browser Session"""
        try:
            self.logger.info("üîå ‡∏´‡∏¢‡∏∏‡∏î Browser Session...")
            
            if self.current_browser_type == 'puppeteer' and self.puppeteer_controller:
                await self.puppeteer_controller.stop_browser()
            elif self.current_browser_type == 'selenium' and self.selenium_controller:
                await self.selenium_controller.stop_browser()
            elif self.current_browser_type == 'chrome' and self.chrome_controller:
                await self.chrome_controller.stop_browser()
            
            self.browser_session_active = False
            self.current_browser_type = None
            
            self.logger.info("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î Browser Session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Browser: {e}")
            return False

    async def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            self.logger.info("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö WAWAGOD...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î Browser Session
            if self.browser_session_active:
                await self.stop_browser_session()
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Controllers
            if self.backup_controller:
                await self.backup_controller.cleanup()
            
            self.system_initialized = False
            self.logger.info("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: {e}")

    def get_system_status(self):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        return {
            'system_initialized': self.system_initialized,
            'browser_session_active': self.browser_session_active,
            'current_browser_type': self.current_browser_type,
            'controllers': {
                'chrome_controller': self.chrome_controller is not None,
                'puppeteer_controller': self.puppeteer_controller is not None,
                'selenium_controller': self.selenium_controller is not None,
                'thai_processor': self.thai_processor is not None,
                'ai_integration': self.ai_integration is not None,
                'visual_recognition': self.visual_recognition is not None,
                'ocr_processor': self.ocr_processor is not None,
                'input_controller': self.input_controller is not None,
                'backup_controller': self.backup_controller is not None
            },
            'config': self.config,
            'timestamp': datetime.now().isoformat()
        }

# Test Function
async def test_wawagod():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö WAWAGOD Master Controller"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö WAWAGOD Master Controller...")
    
    wawagod = WAWAGODMaster()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    success = await wawagod.initialize_system()
    if not success:
        print("‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    status = wawagod.get_system_status()
    print(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: {status}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Browser Session
    success = await wawagod.start_browser_session('puppeteer', headless=True)
    if success:
        print("‚úÖ Browser Session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        await wawagod.navigate_to_url("https://www.google.com")
        
        # ‡∏´‡∏¢‡∏∏‡∏î Browser
        await wawagod.stop_browser_session()
    else:
        print("‚ùå Browser Session ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    await wawagod.cleanup()
    print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    asyncio.run(test_wawagod()) 