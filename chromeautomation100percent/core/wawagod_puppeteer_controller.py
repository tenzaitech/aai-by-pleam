#!/usr/bin/env python3
"""
üéØ WAWAGOD Puppeteer Controller - JavaScript Browser Automation
‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö automation ‡πÄ‡∏£‡πá‡∏ß
"""

import asyncio
import logging
import os
import json
from typing import Dict, Any, Optional, List
from datetime import datetime

class WAWAGODPuppeteerController:
    """
    üéØ WAWAGOD Puppeteer Controller
    ‡πÉ‡∏ä‡πâ Puppeteer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö browser automation ‡πÅ‡∏ö‡∏ö JavaScript
    """
    
    def __init__(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer Controller"""
        self.logger = logging.getLogger('WAWAGOD.Puppeteer')
        self.browser = None
        self.page = None
        self.is_running = False
        
        # Puppeteer Configuration
        self.config = {
            'headless': False,
            'slow_mo': 100,
            'args': [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ]
        }
        
        self.logger.info("‚úÖ WAWAGOD Puppeteer Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    async def initialize(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer Controller"""
        try:
            self.logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer Controller...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js ‡πÅ‡∏•‡∏∞ Puppeteer
            await self._check_dependencies()
            
            self.logger.info("‚úÖ Puppeteer Controller ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer: {e}")
            return False

    async def _check_dependencies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js
            import subprocess
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception("Node.js ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Puppeteer
            result = subprocess.run(['npm', 'list', 'puppeteer'], capture_output=True, text=True)
            if 'puppeteer' not in result.stdout:
                self.logger.warning("‚ö†Ô∏è Puppeteer ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
                await self._install_puppeteer()
            
            self.logger.info("‚úÖ Dependencies ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies: {e}")
            raise

    async def _install_puppeteer(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Puppeteer"""
        try:
            self.logger.info("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Puppeteer...")
            
            import subprocess
            result = subprocess.run(['npm', 'install', 'puppeteer'], capture_output=True, text=True)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Puppeteer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                raise Exception(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Puppeteer ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}")
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Puppeteer: {e}")
            raise

    async def start_browser(self, headless: bool = False):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser"""
        try:
            self.logger.info(f"üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer Browser (headless: {headless})")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer
            script = self._create_puppeteer_script(headless)
            
            # ‡∏£‡∏±‡∏ô JavaScript script
            await self._run_puppeteer_script(script)
            
            self.is_running = True
            self.logger.info("‚úÖ Puppeteer Browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser: {e}")
            return False

    def _create_puppeteer_script(self, headless: bool) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Puppeteer"""
        script = f"""
const puppeteer = require('puppeteer');

(async () => {{
    try {{
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer Browser...');
        
        const browser = await puppeteer.launch({{
            headless: {str(headless).lower()},
            slowMo: {self.config['slow_mo']},
            args: {json.dumps(self.config['args'])},
            defaultViewport: {{ width: 1920, height: 1080 }}
        }});
        
        const page = await browser.newPage();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ User Agent
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Viewport
        await page.setViewport({{ width: 1920, height: 1080 }});
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å browser ‡πÅ‡∏•‡∏∞ page instance
        global.wawagod_browser = browser;
        global.wawagod_page = page;
        
        console.log('‚úÖ Puppeteer Browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Python
        process.send({{ type: 'browser_ready', success: true }});
        
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        process.send({{ type: 'browser_error', error: error.message }});
    }}
}})();
"""
        return script

    async def _run_puppeteer_script(self, script: str):
        """‡∏£‡∏±‡∏ô JavaScript script"""
        try:
            import subprocess
            import tempfile
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JavaScript ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
                f.write(script)
                script_path = f.name
            
            # ‡∏£‡∏±‡∏ô script
            process = subprocess.Popen(
                ['node', script_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            stdout, stderr = process.communicate(timeout=30)
            
            if process.returncode == 0:
                self.logger.info("‚úÖ JavaScript script ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                self.logger.debug(f"stdout: {stdout}")
            else:
                raise Exception(f"JavaScript script ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {stderr}")
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            os.unlink(script_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô JavaScript script: {e}")
            raise

    async def navigate_to(self, url: str):
        """‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL"""
        try:
            self.logger.info(f"üåê ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {url}")
            
            script = f"""
(async () => {{
    try {{
        if (global.wawagod_page) {{
            await global.wawagod_page.goto('{url}', {{ 
                waitUntil: 'networkidle2',
                timeout: 30000 
            }});
            console.log('‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {url}');
            process.send({{ type: 'navigation_success', url: '{url}' }});
        }} else {{
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }}
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á:', error);
        process.send({{ type: 'navigation_error', error: error.message }});
    }}
}})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info(f"‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {url}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á: {e}")
            return False

    async def click_element(self, element_info: Dict[str, Any]):
        """‡∏Ñ‡∏•‡∏¥‡∏Å Element"""
        try:
            self.logger.info(f"üéØ ‡∏Ñ‡∏•‡∏¥‡∏Å Element: {element_info}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á selector ‡∏à‡∏≤‡∏Å element_info
            selector = self._create_selector(element_info)
            
            script = f"""
(async () => {{
    try {{
        if (global.wawagod_page) {{
            await global.wawagod_page.waitForSelector('{selector}', {{ timeout: 10000 }});
            await global.wawagod_page.click('{selector}');
            console.log('‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Element ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {selector}');
            process.send({{ type: 'click_success', selector: '{selector}' }});
        }} else {{
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }}
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å:', error);
        process.send({{ type: 'click_error', error: error.message }});
    }}
}})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Element ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {selector}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å: {e}")
            return False

    def _create_selector(self, element_info: Dict[str, Any]) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CSS selector ‡∏à‡∏≤‡∏Å element_info"""
        if 'id' in element_info:
            return f"#{element_info['id']}"
        elif 'class' in element_info:
            return f".{element_info['class']}"
        elif 'tag' in element_info:
            return element_info['tag']
        elif 'text' in element_info:
            return f"text={element_info['text']}"
        else:
            return "body"  # fallback

    async def fill_field(self, field_name: str, value: str):
        """‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå"""
        try:
            self.logger.info(f"üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå: {field_name} = {value}")
            
            script = f"""
(async () => {{
    try {{
        if (global.wawagod_page) {{
            // ‡∏´‡∏≤ input field
            const selector = 'input[name="{field_name}"], input[id="{field_name}"], input[placeholder*="{field_name}"]';
            await global.wawagod_page.waitForSelector(selector, {{ timeout: 10000 }});
            
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            await global.wawagod_page.click(selector);
            await global.wawagod_page.keyboard.down('Control');
            await global.wawagod_page.keyboard.press('KeyA');
            await global.wawagod_page.keyboard.up('Control');
            await global.wawagod_page.type(selector, '{value}');
            
            console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {field_name}');
            process.send({{ type: 'fill_success', field: '{field_name}' }});
        }} else {{
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }}
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå:', error);
        process.send({{ type: 'fill_error', error: error.message }});
    }}
}})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info(f"‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {field_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå: {e}")
            return False

    async def take_screenshot(self, file_path: str):
        """‡∏ñ‡πà‡∏≤‡∏¢ Screenshot"""
        try:
            self.logger.info(f"üì∏ ‡∏ñ‡πà‡∏≤‡∏¢ Screenshot: {file_path}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            script = f"""
(async () => {{
    try {{
        if (global.wawagod_page) {{
            await global.wawagod_page.screenshot({{
                path: '{file_path}',
                fullPage: true
            }});
            console.log('‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢ Screenshot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_path}');
            process.send({{ type: 'screenshot_success', path: '{file_path}' }});
        }} else {{
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }}
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ Screenshot:', error);
        process.send({{ type: 'screenshot_error', error: error.message }});
    }}
}})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info(f"‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢ Screenshot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ Screenshot: {e}")
            return False

    async def get_page_content(self):
        """‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö"""
        try:
            self.logger.info("üìÑ ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö...")
            
            script = """
(async () => {
    try {
        if (global.wawagod_page) {
            const content = await global.wawagod_page.content();
            const title = await global.wawagod_page.title();
            const url = global.wawagod_page.url();
            
            console.log('‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            process.send({ 
                type: 'content_success', 
                content: content,
                title: title,
                url: url
            });
        } else {
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:', error);
        process.send({ type: 'content_error', error: error.message });
    }
})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info("‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {e}")
            return False

    async def wait_for_element(self, selector: str, timeout: int = 10000):
        """‡∏£‡∏≠ Element ‡∏õ‡∏£‡∏≤‡∏Å‡∏è"""
        try:
            self.logger.info(f"‚è≥ ‡∏£‡∏≠ Element: {selector}")
            
            script = f"""
(async () => {{
    try {{
        if (global.wawagod_page) {{
            await global.wawagod_page.waitForSelector('{selector}', {{ timeout: {timeout} }});
            console.log('‚úÖ Element ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß: {selector}');
            process.send({{ type: 'wait_success', selector: '{selector}' }});
        }} else {{
            throw new Error('Page ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }}
    }} catch (error) {{
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠ Element:', error);
        process.send({{ type: 'wait_error', error: error.message }});
    }}
}})();
"""
            await self._run_puppeteer_script(script)
            self.logger.info(f"‚úÖ Element ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß: {selector}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠ Element: {e}")
            return False

    async def stop_browser(self):
        """‡∏´‡∏¢‡∏∏‡∏î Browser"""
        try:
            self.logger.info("üîå ‡∏´‡∏¢‡∏∏‡∏î Puppeteer Browser...")
            
            script = """
(async () => {
    try {
        if (global.wawagod_browser) {
            await global.wawagod_browser.close();
            console.log('‚úÖ ‡∏´‡∏¢‡∏∏‡∏î Browser ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            process.send({ type: 'browser_stopped' });
        } else {
            console.log('‚ö†Ô∏è Browser ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
            process.send({ type: 'browser_not_running' });
        }
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Browser:', error);
        process.send({ type: 'browser_stop_error', error: error.message });
    }
})();
"""
            await self._run_puppeteer_script(script)
            
            self.is_running = False
            self.logger.info("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î Puppeteer Browser ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Browser: {e}")
            return False

    def get_status(self):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        return {
            'is_running': self.is_running,
            'browser': self.browser is not None,
            'page': self.page is not None,
            'config': self.config,
            'timestamp': datetime.now().isoformat()
        }

# Test Function
async def test_puppeteer():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Puppeteer Controller"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö WAWAGOD Puppeteer Controller...")
    
    controller = WAWAGODPuppeteerController()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    success = await controller.initialize()
    if not success:
        print("‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser
    success = await controller.start_browser(headless=True)
    if success:
        print("‚úÖ Browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        await controller.navigate_to("https://www.google.com")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ Screenshot
        await controller.take_screenshot("test_screenshot.png")
        
        # ‡∏´‡∏¢‡∏∏‡∏î Browser
        await controller.stop_browser()
    else:
        print("‚ùå Browser ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    asyncio.run(test_puppeteer()) 