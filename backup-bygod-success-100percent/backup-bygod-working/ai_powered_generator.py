"""
AI-Powered System Generator
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤
"""

import os
import json
import asyncio
import multiprocessing as mp
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
from typing import Dict, List, Any
import logging
import time
from pathlib import Path

class AISystemGenerator:
    """
    AI-Powered System Generator
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤
    """
    
    def __init__(self):
        self.templates = self.load_templates()
        self.workers = 4
        self.logger = self.setup_logger()
        
    def setup_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('ai_generator.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
    
    def load_templates(self) -> Dict[str, str]:
        """‡πÇ‡∏´‡∏•‡∏î templates ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return {
            'master_controller': self.get_master_controller_template(),
            'chrome_automation': self.get_chrome_automation_template(),
            'thai_processor': self.get_thai_processor_template(),
            'ai_integration': self.get_ai_integration_template(),
            'config': self.get_config_template(),
            'requirements': self.get_requirements_template(),
            'readme': self.get_readme_template(),
            'launcher': self.get_launcher_template()
        }
    
    def get_master_controller_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master Controller"""
        return '''
"""
Master Controller - AI-Powered Chrome Automation
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI
"""

import asyncio
import logging
from typing import Dict, Any
from pathlib import Path

class ChromeAutomationMaster:
    def __init__(self):
        self.controllers = {}
        self.logger = logging.getLogger(__name__)
        
    async def initialize_all_controllers(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô controllers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        tasks = [
            self.init_chrome_controller(),
            self.init_thai_processor(),
            self.init_ai_integration(),
            self.init_visual_recognition()
        ]
        await asyncio.gather(*tasks)
        
    async def init_chrome_controller(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome Controller"""
        # Chrome automation logic
        pass
        
    async def init_thai_processor(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Thai Language Processor"""
        # Thai language processing
        pass
        
    async def init_ai_integration(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Integration"""
        # AI integration logic
        pass
        
    async def init_visual_recognition(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Visual Recognition"""
        # Visual recognition logic
        pass

if __name__ == "__main__":
    master = ChromeAutomationMaster()
    asyncio.run(master.initialize_all_controllers())
'''
    
    def get_chrome_automation_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome Automation"""
        return '''
"""
Chrome Automation Controller
‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Chrome ‡∏î‡πâ‡∏ß‡∏¢ AI
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import asyncio

class ChromeController:
    def __init__(self):
        self.driver = None
        
    async def start_browser(self, headless=False):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô browser"""
        # ‡πÉ‡∏ä‡πâ Singleton pattern ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        from core.chrome_controller import AIChromeController
        controller = AIChromeController()
        self.driver = await controller.start_ai_browser(headless=headless)
        
    async def navigate_to(self, url):
        """‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL"""
        if self.driver:
            self.driver.get(url)
        
    async def smart_click(self, element_description):
        """‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        # AI-powered element finding and clicking
        pass
'''
    
    def get_thai_processor_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Thai Language Processor"""
        return '''
"""
Thai Language Processor
‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
"""

from pythainlp import word_tokenize
import easyocr

class ThaiLanguageProcessor:
    def __init__(self):
        self.ocr_reader = easyocr.Reader(['th', 'en'])
        
    def process_thai_command(self, command):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        tokens = word_tokenize(command)
        return self.extract_action(tokens)
        
    def ocr_thai_text(self, image_path):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
        results = self.ocr_reader.readtext(image_path)
        return [text for _, text, conf in results if conf > 0.5]
'''
    
    def get_ai_integration_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Integration"""
        return '''
"""
AI Integration Controller
‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI Services
"""

import openai
from typing import Dict, Any

class AIIntegration:
    def __init__(self, api_key):
        self.client = openai.OpenAI(api_key=api_key)
        
    async def analyze_screenshot(self, image_path):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI"""
        with open(image_path, "rb") as image_file:
            response = self.client.chat.completions.create(
                model="gpt-4-vision-preview",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Analyze this screenshot and describe what you see"},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_file.read()}"}}
                        ]
                    }
                ]
            )
        return response.choices[0].message.content
'''
    
    def get_config_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Configuration"""
        return '''
"""
Configuration Manager
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import json
from pathlib import Path

class ConfigManager:
    def __init__(self):
        self.config_path = Path("config.json")
        self.config = self.load_config()
        
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        if self.config_path.exists():
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return self.get_default_config()
        
    def get_default_config(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        return {
            "chrome": {
                "headless": False,
                "timeout": 30
            },
            "ai": {
                "model": "gpt-4-vision-preview",
                "max_tokens": 1000
            },
            "thai": {
                "ocr_confidence": 0.5,
                "language": ["th", "en"]
            }
        }
'''
    
    def get_requirements_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Requirements"""
        return '''
# AI-Powered Chrome Automation Requirements
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install -r requirements.txt

# Core Dependencies
selenium==4.18.1
webdriver-manager==4.0.1
pyautogui==0.9.54
opencv-python==4.11.0.86

# AI & ML
openai==1.58.1
transformers==4.53.0
torch==2.7.1

# Thai Language Processing
pythainlp==5.1.2
easyocr==1.7.2

# Utilities
requests==2.31.0
python-dotenv==1.0.1
asyncio
aiofiles
'''
    
    def get_readme_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö README"""
        return '''
# üöÄ AI-Powered Chrome Automation System

## üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤

### ‚ö° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
```bash
# ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
python master_launcher.py
```

### üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
- Chrome Automation 100%
- Thai Language Support
- AI Integration
- Visual Recognition
- Natural Language Commands

### üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
- **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö:** 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤)
- **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:** 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
- **‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:** ‡πÅ‡∏ö‡∏ö Real-time

### üáπüá≠ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
- OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

---
**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - AI ‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå** üß†
'''
    
    def get_launcher_template(self) -> str:
        """Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Master Launcher"""
        return '''
"""
Master Launcher - ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import asyncio
import sys
import os
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path
sys.path.append(str(Path(__file__).parent))

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI-Powered Chrome Automation System")
    print("‚ö° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
    
    try:
        # Import ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        from master_controller import ChromeAutomationMaster
        
        master = ChromeAutomationMaster()
        await master.initialize_all_controllers()
        
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
        print("üáπüá≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠
        await master.run_system()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
'''
    
    async def generate_file_async(self, filename: str, content: str, output_dir: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö async"""
        try:
            file_path = Path(output_dir) / filename
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {filename}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
            return False
    
    async def generate_all_files_parallel(self, output_dir: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        tasks = []
        
        for filename, template in self.templates.items():
            if filename == 'master_controller':
                filename = 'master_controller.py'
            elif filename == 'chrome_automation':
                filename = 'core/chrome_controller.py'
            elif filename == 'thai_processor':
                filename = 'core/thai_processor.py'
            elif filename == 'ai_integration':
                filename = 'core/ai_integration.py'
            elif filename == 'config':
                filename = 'core/config_manager.py'
            elif filename == 'requirements':
                filename = 'requirements.txt'
            elif filename == 'readme':
                filename = 'README.md'
            elif filename == 'launcher':
                filename = 'master_launcher.py'
            
            task = self.generate_file_async(filename, template, output_dir)
            tasks.append(task)
        
        # ‡∏£‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for r in results if r is True)
        self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{len(tasks)}")
        
        return success_count == len(tasks)
    
    def create_directory_structure(self, output_dir: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        directories = [
            'core',
            'config',
            'data',
            'logs',
            'screenshots',
            'temp'
        ]
        
        for dir_name in directories:
            dir_path = Path(output_dir) / dir_name
            dir_path.mkdir(parents=True, exist_ok=True)
            self.logger.info(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {dir_name}")
    
    async def generate_complete_system(self, output_dir: str = "backup-bygod"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        start_time = time.time()
        
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á AI-Powered System")
        self.logger.info("‚ö° ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        self.create_directory_structure(output_dir)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        success = await self.generate_all_files_parallel(output_dir)
        
        if success:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°
            await self.create_master_package(output_dir)
            
            elapsed_time = time.time() - start_time
            self.logger.info(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {elapsed_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            self.logger.info("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏£‡∏±‡∏ô master_launcher.py")
        else:
            self.logger.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
    
    async def create_master_package(self, output_dir: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°"""
        package_content = f'''
"""
Master Package - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
"""

import os
import sys
import subprocess
from pathlib import Path

def install_dependencies():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
    print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
    subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])

def setup_environment():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"""
    print("üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...")
    os.environ.setdefault("PYTHONPATH", str(Path(__file__).parent))

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ AI-Powered Chrome Automation System")
    print("‚ö° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ WAWA - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 5 ‡πÄ‡∏ó‡πà‡∏≤")
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
    install_dependencies()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    setup_environment()
    
    # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    subprocess.run([sys.executable, "master_launcher.py"])

if __name__ == "__main__":
    main()
'''
        
        package_path = Path(output_dir) / "run_system.py"
        with open(package_path, 'w', encoding='utf-8') as f:
            f.write(package_content)
        
        self.logger.info("üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°: run_system.py")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async def create_ai_system():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á AI System"""
    generator = AISystemGenerator()
    await generator.generate_complete_system()

if __name__ == "__main__":
    asyncio.run(create_ai_system()) 