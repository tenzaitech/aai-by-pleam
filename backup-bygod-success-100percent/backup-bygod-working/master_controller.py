
"""
Full System Launcher
‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
"""

import asyncio
import sys
import logging
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional

class FullSystemLauncher:
    def __init__(self):
        self.logger = self.setup_logger()
        self.config = self.load_config()
        self.status = {"running": False, "components": {}}
        
    def setup_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "system.log"),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
        
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_path = Path("config/system.json")
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return self.get_default_config()
        
    def get_default_config(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        return {
            "system": {
                "name": "AI-Powered Chrome Automation",
                "version": "1.0.0",
                "auto_start": True
            },
            "chrome": {
                "headless": False,
                "timeout": 30,
                "window_size": "1920x1080"
            },
            "ai": {
                "enabled": True,
                "provider": "openai",
                "model": "gpt-4-vision-preview"
            },
            "thai": {
                "enabled": True,
                "ocr_confidence": 0.5
            },
            "logging": {
                "level": "INFO",
                "file_rotation": True
            }
        }
        
    async def initialize_components(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
        
        components = [
            ("Chrome Controller", self.init_chrome),
            ("Thai Processor", self.init_thai),
            ("AI Integration", self.init_ai),
            ("Visual Recognition", self.init_visual)
        ]
        
        for name, init_func in components:
            try:
                await init_func()
                self.status["components"][name] = "ready"
                self.logger.info(f"‚úÖ {name} ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                self.status["components"][name] = "error"
                self.logger.error(f"‚ùå {name} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
    async def init_chrome(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome Controller"""
        from core.chrome_controller import AIChromeController
        api_key = os.getenv("OPENAI_API_KEY", "")
        self.chrome_controller = AIChromeController(api_key)
        await self.chrome_controller.start_ai_browser(
            headless=self.config["chrome"]["headless"]
        )
        
    async def init_thai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Thai Processor"""
        from core.thai_processor import FullThaiProcessor
        self.thai_processor = FullThaiProcessor()
        
    async def init_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Integration"""
        if self.config["ai"]["enabled"]:
            from core.ai_integration import MultimodalAIIntegration
            api_key = os.getenv("OPENAI_API_KEY")
            # ‡πÉ‡∏ä‡πâ AI Integration ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key (‡∏à‡∏∞‡πÉ‡∏ä‡πâ Local Processing)
            self.ai_integration = MultimodalAIIntegration(api_key)
            
    async def init_visual(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Visual Recognition"""
        from core.visual_recognition import VisualRecognition
        self.visual_recognition = VisualRecognition()
        
    async def launch_full_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        self.logger.info(f"üìã ‡∏£‡∏∞‡∏ö‡∏ö: {self.config['system']['name']} v{self.config['system']['version']}")
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
            await self.initialize_components()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            ready_components = sum(1 for status in self.status["components"].values() if status == "ready")
            total_components = len(self.status["components"])
            
            self.logger.info(f"üìä Components ‡∏û‡∏£‡πâ‡∏≠‡∏°: {ready_components}/{total_components}")
            
            if ready_components == total_components:
                self.status["running"] = True
                self.logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
                
                # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
                await self.run_main_system()
            else:
                self.logger.warning("‚ö†Ô∏è ‡∏ö‡∏≤‡∏á components ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠")
                await self.run_main_system()
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return 1
            
        return 0
        
    async def run_main_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
        self.logger.info("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if hasattr(self, 'chrome_controller'):
            await self.chrome_controller.ai_navigate("https://www.google.com", "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Google")
            self.logger.info("üåê ‡πÄ‡∏õ‡∏¥‡∏î Google ‡πÅ‡∏•‡πâ‡∏ß")
            
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡πÑ‡∏î‡πâ)
        self.logger.info("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠...")
        
    def get_system_status(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        return self.status

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    launcher = FullSystemLauncher()
    return await launcher.launch_full_system()

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
