#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gemini Cursor Integration Launcher
Launcher script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Gemini Cursor Integration
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment ‡πÅ‡∏•‡∏∞ dependencies"""
    logger.info("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        logger.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Python 3.8 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
        return False
    
    logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö virtual environment
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        logger.info("‚úÖ Virtual environment ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
    else:
        logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô virtual environment")
    
    return True

def check_dependencies():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    logger.info("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies...")
    
    required_packages = [
        'flask',
        'flask-socketio',
        'google-generativeai',
        'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            logger.info(f"‚úÖ {package}")
        except ImportError:
            logger.warning(f"‚ùå {package} - ‡πÑ‡∏°‡πà‡∏û‡∏ö")
            missing_packages.append(package)
    
    if missing_packages:
        logger.info("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢...")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install'
            ] + missing_packages)
            logger.info("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÑ‡∏î‡πâ: {e}")
            return False
    
    return True

def check_cursor_path():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏Ç‡∏≠‡∏á Cursor"""
    logger.info("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cursor path...")
    
    username = os.getenv('USERNAME', 'pleam')
    cursor_paths = [
        rf"C:\Users\{username}\AppData\Local\Programs\cursor\Cursor.exe",
        rf"C:\Users\{username}\AppData\Roaming\cursor\Cursor.exe",
        r"C:\Program Files\Cursor\Cursor.exe",
        r"C:\Program Files (x86)\Cursor\Cursor.exe"
    ]
    
    for path in cursor_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ ‡∏û‡∏ö Cursor ‡∏ó‡∏µ‡πà: {path}")
            return path
    
    logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Cursor ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    return None

def check_api_key():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google API Key"""
    logger.info("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google API Key...")
    
    api_key = os.getenv('GOOGLE_API_KEY')
    if api_key:
        logger.info("‚úÖ ‡∏û‡∏ö Google API Key")
        return True
    else:
        logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_API_KEY environment variable")
        logger.info("üí° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
        logger.info("   set GOOGLE_API_KEY=your_api_key_here")
        return False

def create_config_file():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    config_file = Path("gemini_cursor_config.json")
    
    if not config_file.exists():
        logger.info("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config...")
        
        config = {
            "cursor_path": check_cursor_path(),
            "api_key": os.getenv('GOOGLE_API_KEY'),
            "port": 8002,
            "host": "0.0.0.0",
            "debug": True
        }
        
        import json
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return config_file
    
    return config_file

def start_system():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Gemini Cursor Integration"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Gemini Cursor Integration...")
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        main_file = Path("gemini_cursor_integration.py")
        if not main_file.exists():
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå gemini_cursor_integration.py")
            return False
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        logger.info("üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebApp ‡∏ó‡∏µ‡πà http://localhost:8002")
        subprocess.run([sys.executable, "gemini_cursor_integration.py"])
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False
    
    return True

def main():
    """Main function"""
    print("=" * 60)
    print("üöÄ Gemini Cursor Integration Launcher")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment
    if not check_environment():
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
    if not check_dependencies():
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cursor
    cursor_path = check_cursor_path()
    if not cursor_path:
        logger.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö Cursor")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
    if not check_api_key():
        logger.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Gemini AI ‡πÑ‡∏î‡πâ")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á config file
    config_file = create_config_file()
    
    print("\n" + "=" * 60)
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("=" * 60)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
    print(f"   ‚Ä¢ Python: ‚úÖ")
    print(f"   ‚Ä¢ Dependencies: ‚úÖ")
    print(f"   ‚Ä¢ Cursor: {'‚úÖ' if cursor_path else '‚ö†Ô∏è'}")
    print(f"   ‚Ä¢ API Key: {'‚úÖ' if check_api_key() else '‚ö†Ô∏è'}")
    print(f"   ‚Ä¢ Config: ‚úÖ ({config_file})")
    print("\nüåê ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:8002")
    print("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("   ‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå test.py ‡πÉ‡∏ô Cursor")
    print("   ‚Ä¢ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á python script.py")
    print("   ‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå google.com")
    print("\n‚èπÔ∏è ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
    print("=" * 60)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    return start_system()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 