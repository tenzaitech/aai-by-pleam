#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GPU Test Script for TensorFlow 2.10.1
"""

import sys
import os

def test_tensorflow_gpu():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö TensorFlow GPU Support"""
    try:
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö TensorFlow GPU Support...")
        
        import tensorflow as tf
        print(f"‚úÖ TensorFlow Version: {tf.__version__}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPU Devices
        gpu_devices = tf.config.list_physical_devices('GPU')
        cpu_devices = tf.config.list_physical_devices('CPU')
        
        print(f"üñ•Ô∏è  CPU Devices: {len(cpu_devices)}")
        print(f"üéÆ GPU Devices: {len(gpu_devices)}")
        
        if gpu_devices:
            print("‚úÖ GPU ‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            for i, gpu in enumerate(gpu_devices):
                print(f"   GPU {i}: {gpu.name}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GPU Memory
            try:
                with tf.device('/GPU:0'):
                    a = tf.constant([[1.0, 2.0], [3.0, 4.0]])
                    b = tf.constant([[1.0, 1.0], [0.0, 1.0]])
                    c = tf.matmul(a, b)
                    print(f"‚úÖ GPU Matrix Test: {c.numpy()}")
            except Exception as e:
                print(f"‚ö†Ô∏è  GPU Matrix Test Failed: {e}")
        else:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö GPU ‡∏´‡∏£‡∏∑‡∏≠ TensorFlow ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á GPU ‡πÑ‡∏î‡πâ")
            print("üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:")
            print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NVIDIA Driver")
            print("   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA Installation")
            print("   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cuDNN Installation")
            print("   4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import TensorFlow: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_cuda_environment():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö CUDA Environment"""
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA Environment...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
    cuda_path = os.environ.get('CUDA_PATH')
    cuda_home = os.environ.get('CUDA_HOME')
    
    print(f"CUDA_PATH: {cuda_path}")
    print(f"CUDA_HOME: {cuda_home}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PATH
    path_entries = os.environ.get('PATH', '').split(';')
    cuda_paths = [p for p in path_entries if 'cuda' in p.lower()]
    
    if cuda_paths:
        print("‚úÖ ‡∏û‡∏ö CUDA ‡πÉ‡∏ô PATH:")
        for path in cuda_paths:
            print(f"   {path}")
    else:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö CUDA ‡πÉ‡∏ô PATH")

def test_system_ready():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome Controller
        from core.chrome_controller import AIChromeController
        chrome = AIChromeController("test_key")
        print("‚úÖ Chrome Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor
        from core.thai_processor import FullThaiProcessor
        thai = FullThaiProcessor()
        print("‚úÖ Thai Processor ‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration
        from core.ai_integration import MultimodalAIIntegration
        ai = MultimodalAIIntegration()
        print("‚úÖ AI Integration ‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Visual Recognition
        from core.visual_recognition import VisualRecognition
        visual = VisualRecognition()
        print("‚úÖ Visual Recognition ‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backup Controller
        from core.backup_controller import BackupController
        backup = BackupController()
        print("‚úÖ Backup Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
        return False

def main():
    """Main function"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Backup-byGod")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CUDA Environment
    test_cuda_environment()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TensorFlow GPU
    tf_success = test_tensorflow_gpu()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    system_success = test_system_ready()
    
    print("\n" + "=" * 50)
    if tf_success and system_success:
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö!")
    else:
        print("‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    
    print("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î...")
    input()

if __name__ == "__main__":
    main() 