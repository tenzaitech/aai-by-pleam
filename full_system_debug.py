#!/usr/bin/env python3
"""
üîç Full System Chrome Debug
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô C:/ ‡πÅ‡∏•‡∏∞ D:/ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ Chrome ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á
"""

import os
import sys
import time
import subprocess
import threading
import glob
from datetime import datetime
from pathlib import Path

def log_debug(message):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å debug log"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] üîç {message}")

def scan_python_files_for_selenium(directory):
    """‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå Python ‡πÉ‡∏ô directory ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ selenium"""
    selenium_files = []
    
    try:
        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå Python ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        python_files = glob.glob(os.path.join(directory, "**/*.py"), recursive=True)
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô selenium
                    if any(keyword in content for keyword in [
                        'webdriver.Chrome',
                        'selenium',
                        'from selenium',
                        'import selenium',
                        'Chrome(',
                        'Options()'
                    ]):
                        selenium_files.append(file_path)
                        
            except Exception as e:
                log_debug(f"Error reading {file_path}: {e}")
                
    except Exception as e:
        log_debug(f"Error scanning {directory}: {e}")
    
    return selenium_files

def monitor_chrome_processes():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Chrome processes ‡πÅ‡∏ö‡∏ö real-time"""
    while True:
        try:
            result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq chrome.exe'], 
                                  capture_output=True, text=True)
            if 'chrome.exe' in result.stdout:
                log_debug(f"üö® CHROME DETECTED:\n{result.stdout}")
            time.sleep(2)
        except Exception as e:
            log_debug(f"Monitor error: {e}")
            time.sleep(5)

def scan_drives():
    """‡∏™‡πÅ‡∏Å‡∏ô C:/ ‡πÅ‡∏•‡∏∞ D:/ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Chrome automation"""
    log_debug("=== STARTING FULL DRIVE SCAN ===")
    
    drives_to_scan = ['C:', 'D:']
    
    for drive in drives_to_scan:
        if os.path.exists(drive):
            log_debug(f"Scanning drive {drive}...")
            
            # ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            relevant_dirs = [
                os.path.join(drive, 'FULL-AI-IDEA'),
                os.path.join(drive, 'Users'),
                os.path.join(drive, 'Program Files'),
                os.path.join(drive, 'Program Files (x86)'),
                os.path.join(drive, 'Python'),
                os.path.join(drive, 'Anaconda'),
                os.path.join(drive, 'Miniconda'),
            ]
            
            for dir_path in relevant_dirs:
                if os.path.exists(dir_path):
                    log_debug(f"Scanning {dir_path}...")
                    selenium_files = scan_python_files_for_selenium(dir_path)
                    
                    if selenium_files:
                        log_debug(f"Found {len(selenium_files)} files with selenium in {dir_path}")
                        for file_path in selenium_files[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å
                            log_debug(f"  - {file_path}")
                    else:
                        log_debug(f"No selenium files found in {dir_path}")

def test_current_project():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    log_debug("=== TESTING CURRENT PROJECT ===")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules
    try:
        import selenium
        log_debug(f"Selenium version: {selenium.__version__}")
    except Exception as e:
        log_debug(f"Selenium import error: {e}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Chrome Controller
    try:
        from core.chrome_controller import AIChromeController
        controller = AIChromeController()
        log_debug("Chrome Controller created successfully")
    except Exception as e:
        log_debug(f"Chrome Controller error: {e}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Dashboard
    try:
        import dashboard.app
        log_debug("Dashboard imported successfully")
    except Exception as e:
        log_debug(f"Dashboard error: {e}")

def check_running_processes():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö processes ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    log_debug("=== CHECKING RUNNING PROCESSES ===")
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python processes
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python.exe'], 
                              capture_output=True, text=True)
        log_debug(f"Python processes:\n{result.stdout}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chrome processes
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq chrome.exe'], 
                              capture_output=True, text=True)
        log_debug(f"Chrome processes:\n{result.stdout}")
        
    except Exception as e:
        log_debug(f"Process check error: {e}")

def main():
    """Main debug function"""
    print("üîç Full System Chrome Debug Started")
    print("=" * 60)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitor Chrome processes
    monitor_thread = threading.Thread(target=monitor_chrome_processes, daemon=True)
    monitor_thread.start()
    log_debug("Chrome process monitor started")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö processes ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    check_running_processes()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    test_current_project()
    
    # ‡∏™‡πÅ‡∏Å‡∏ô drives
    scan_drives()
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ monitor ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    print("\nüîç Full system debug completed. Monitoring Chrome processes...")
    print("Press Ctrl+C to stop")
    
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print("\nüîç Debug stopped by user")

if __name__ == "__main__":
    main() 