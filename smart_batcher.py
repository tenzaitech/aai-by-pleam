"""
Smart Batch Processor
‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
"""

import asyncio
from typing import List, Callable, Any, Dict
import time
from dataclasses import dataclass

@dataclass
class BatchJob:
    name: str
    func: Callable
    args: tuple = ()
    priority: int = 1

class SmartBatcher:
    def __init__(self, max_concurrent: int = 4):
        self.max_concurrent = max_concurrent
        self.jobs: List[BatchJob] = []
        self.results = {}
        
    def add_job(self, job: BatchJob):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ batch"""
        self.jobs.append(job)
        
    async def process_batch(self) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• batch ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(self.jobs)} ‡∏á‡∏≤‡∏ô...")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° priority
        self.jobs.sort(key=lambda x: x.priority, reverse=True)
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô chunks
        chunks = [self.jobs[i:i + self.max_concurrent] 
                 for i in range(0, len(self.jobs), self.max_concurrent)]
        
        for i, chunk in enumerate(chunks):
            print(f"üì¶ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• chunk {i+1}/{len(chunks)}")
            
            # ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            tasks = []
            for job in chunk:
                task = asyncio.create_task(self._run_job(job))
                tasks.append(task)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
            chunk_results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            for job, result in zip(chunk, chunk_results):
                self.results[job.name] = result
                
        print("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return self.results
        
    async def _run_job(self, job: BatchJob) -> Any:
        """‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        try:
            start_time = time.time()
            
            if asyncio.iscoroutinefunction(job.func):
                result = await job.func(*job.args)
            else:
                result = job.func(*job.args)
                
            end_time = time.time()
            print(f"‚úÖ {job.name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô {end_time - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            return result
            
        except Exception as e:
            print(f"‚ùå {job.name} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return None

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async def example_job(name: str, delay: float):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô"""
    await asyncio.sleep(delay)
    return f"‡πÄ‡∏™‡∏£‡πá‡∏à {name}"

async def main():
    batcher = SmartBatcher(max_concurrent=3)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
    batcher.add_job(BatchJob("‡∏á‡∏≤‡∏ô 1", example_job, ("‡∏á‡∏≤‡∏ô 1", 1.0), priority=3))
    batcher.add_job(BatchJob("‡∏á‡∏≤‡∏ô 2", example_job, ("‡∏á‡∏≤‡∏ô 2", 0.5), priority=2))
    batcher.add_job(BatchJob("‡∏á‡∏≤‡∏ô 3", example_job, ("‡∏á‡∏≤‡∏ô 3", 2.0), priority=1))
    batcher.add_job(BatchJob("‡∏á‡∏≤‡∏ô 4", example_job, ("‡∏á‡∏≤‡∏ô 4", 0.3), priority=4))
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    results = await batcher.process_batch()
    
    print("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", results)

if __name__ == "__main__":
    asyncio.run(main()) 