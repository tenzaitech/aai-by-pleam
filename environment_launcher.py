# WAWAGOT.AI - Environment Launcher
# ===============================================================================
# WAWAGOT.AI - Launcher р╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б
# ===============================================================================
# Created: 2024-12-19
# Purpose: Launcher р╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
# ===============================================================================

import asyncio
import json
import sys
import os
from datetime import datetime
from typing import Dict, Any, Optional
import argparse

# Import modules
try:
    from system_environment_manager import SystemEnvironmentManager
    from environment_dashboard import EnvironmentDashboard
    from environment_quick_check import EnvironmentQuickCheck, quick_check, check_specific_area
except ImportError as e:
    print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Ц import modules р╣Др╕Фр╣Й: {e}")
    print("ЁЯФз р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Др╕Яр╕ер╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ")
    sys.exit(1)

# ===============================================================================
# LAUNCHER CLASS
# ===============================================================================

class EnvironmentLauncher:
    """Launcher р╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б"""
    
    def __init__(self):
        self.env_manager = None
        self.dashboard = None
        self.quick_checker = None
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """р╣Вр╕лр╕ер╕Фр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓"""
        default_config = {
            "dashboard_port": 8080,
            "dashboard_host": "0.0.0.0",
            "update_interval": 30,
            "log_level": "INFO",
            "auto_start_dashboard": False,
            "auto_start_monitoring": True
        }
        
        # р╣Вр╕лр╕ер╕Фр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М config р╕Цр╣Йр╕▓р╕бр╕╡
        config_file = "config/environment_config.json"
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    file_config = json.load(f)
                    default_config.update(file_config)
            except Exception as e:
                print(f"тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Ф config р╣Др╕Фр╣Й: {e}")
        
        return default_config
    
    def _save_config(self):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓"""
        config_file = "config/environment_config.json"
        os.makedirs("config", exist_ok=True)
        
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б config р╣Др╕Фр╣Й: {e}")
    
    async def initialize_system(self) -> Dict[str, Any]:
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"""
        print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б WAWAGOT.AI...")
        print("=" * 60)
        
        try:
            # р╕кр╕гр╣Йр╕▓р╕З Environment Manager
            self.env_manager = SystemEnvironmentManager()
            
            # р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ъ
            init_result = await self.env_manager.initialize_system()
            
            if init_result["success"]:
                print("тЬЕ р╕гр╕░р╕Ър╕Ър╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И!")
                
                # р╕кр╕гр╣Йр╕▓р╕З Dashboard
                self.dashboard = EnvironmentDashboard()
                
                # р╕кр╕гр╣Йр╕▓р╕З Quick Checker
                self.quick_checker = EnvironmentQuickCheck()
                
                return {
                    "success": True,
                    "message": "р╕гр╕░р╕Ър╕Ър╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И",
                    "components": {
                        "environment_manager": "р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ",
                        "dashboard": "р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ",
                        "quick_checker": "р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
                    }
                }
            else:
                return init_result
                
        except Exception as e:
            return {
                "success": False,
                "error": f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ъ: {e}"
            }
    
    async def start_dashboard(self, host: str = None, port: int = None) -> Dict[str, Any]:
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard"""
        try:
            if not self.dashboard:
                await self.initialize_system()
            
            host = host or self.config["dashboard_host"]
            port = port or self.config["dashboard_port"]
            
            print(f"ЁЯМР р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard р╕Чр╕╡р╣И http://{host}:{port}")
            
            # р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard р╣Гр╕Щ background
            dashboard_task = asyncio.create_task(
                self.dashboard.start_dashboard(host, port)
            )
            
            return {
                "success": True,
                "message": f"Dashboard р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Чр╕╡р╣И http://{host}:{port}",
                "task": dashboard_task
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard: {e}"
            }
    
    async def run_quick_check(self, area: str = None) -> Dict[str, Any]:
        """р╕гр╕▒р╕Щ Quick Check"""
        try:
            if area:
                print(f"ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╕кр╣Ир╕зр╕Щ: {area}")
                result = await check_specific_area(area)
            else:
                print("ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...")
                result = await quick_check()
            
            return {
                "success": True,
                "result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ: {e}"
            }
    
    async def optimize_environment(self) -> Dict[str, Any]:
        """р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б"""
        try:
            if not self.env_manager:
                await self.initialize_system()
            
            print("ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б...")
            result = await self.env_manager.optimize_environment()
            
            return {
                "success": True,
                "result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: {e}"
            }
    
    async def get_system_status(self) -> Dict[str, Any]:
        """р╕Фр╕╢р╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ"""
        try:
            if not self.env_manager:
                await self.initialize_system()
            
            status = await self.env_manager.get_system_status()
            return {
                "success": True,
                "status": status
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕кр╕Цр╕▓р╕Щр╕░: {e}"
            }
    
    def show_menu(self):
        """р╣Бр╕кр╕Фр╕Зр╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б"""
        print("\n" + "=" * 60)
        print("ЁЯдЦ WAWAGOT.AI Environment Management System")
        print("=" * 60)
        print("1. ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф")
        print("2. ЁЯФз р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╕кр╣Ир╕зр╕Щ")
        print("3. ЁЯМР р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard")
        print("4. тЪб р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б")
        print("5. ЁЯУК р╕Фр╕╣р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ")
        print("6. тЪЩя╕П р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓")
        print("7. ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ")
        print("0. ЁЯЪк р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ")
        print("=" * 60)
    
    async def interactive_mode(self):
        """р╣Вр╕лр╕бр╕Ф Interactive"""
        await self.initialize_system()
        
        while True:
            self.show_menu()
            
            try:
                choice = input("\nр╣Ар╕ер╕╖р╕нр╕Бр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б (0-7): ").strip()
                
                if choice == "0":
                    print("ЁЯСЛ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ WAWAGOT.AI Environment System!")
                    break
                
                elif choice == "1":
                    print("\nЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...")
                    result = await self.run_quick_check()
                    if result["success"]:
                        print("тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ")
                    else:
                        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {result['error']}")
                
                elif choice == "2":
                    print("\nЁЯФз р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╕кр╣Ир╕зр╕Щ:")
                    print("1. р╕гр╕░р╕Ър╕Ър╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ")
                    print("2. Python Environment")
                    print("3. Dependencies")
                    print("4. р╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕в")
                    print("5. р╕Ър╕гр╕┤р╕Бр╕▓р╕г")
                    print("6. р╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕Ир╕▒р╕Фр╣Ар╕Бр╣Зр╕Ъ")
                    print("7. р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю")
                    print("8. р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в")
                    
                    area_choice = input("р╣Ар╕ер╕╖р╕нр╕Бр╕кр╣Ир╕зр╕Щр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ (1-8): ").strip()
                    
                    area_map = {
                        "1": "system",
                        "2": "python",
                        "3": "dependencies",
                        "4": "network",
                        "5": "services",
                        "6": "storage",
                        "7": "performance",
                        "8": "security"
                    }
                    
                    if area_choice in area_map:
                        result = await self.run_quick_check(area_map[area_choice])
                        if result["success"]:
                            print("тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ")
                        else:
                            print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {result['error']}")
                    else:
                        print("тЭМ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")
                
                elif choice == "3":
                    print("\nЁЯМР р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Dashboard...")
                    result = await self.start_dashboard()
                    if result["success"]:
                        print(f"тЬЕ {result['message']}")
                        print("р╕Бр╕Ф Ctrl+C р╣Ар╕Юр╕╖р╣Ир╕нр╕лр╕вр╕╕р╕Ф Dashboard")
                        try:
                            await result["task"]
                        except KeyboardInterrupt:
                            print("\nЁЯЫС р╕лр╕вр╕╕р╕Ф Dashboard")
                    else:
                        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {result['error']}")
                
                elif choice == "4":
                    print("\nтЪб р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б...")
                    result = await self.optimize_environment()
                    if result["success"]:
                        print("тЬЕ р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ")
                        print(json.dumps(result["result"], ensure_ascii=False, indent=2))
                    else:
                        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {result['error']}")
                
                elif choice == "5":
                    print("\nЁЯУК р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ...")
                    result = await self.get_system_status()
                    if result["success"]:
                        status = result["status"]
                        print(f"тЬЕ CPU: {status['performance']['cpu_percent']:.1f}%")
                        print(f"тЬЕ Memory: {status['performance']['memory_percent']:.1f}%")
                        print(f"тЬЕ Process Count: {status['performance']['process_count']}")
                    else:
                        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {result['error']}")
                
                elif choice == "6":
                    self._show_settings()
                
                elif choice == "7":
                    self._show_system_info()
                
                else:
                    print("тЭМ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")
                
                input("\nр╕Бр╕Ф Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б...")
                
            except KeyboardInterrupt:
                print("\nЁЯСЛ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ!")
                break
            except Exception as e:
                print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")
    
    def _show_settings(self):
        """р╣Бр╕кр╕Фр╕Зр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓"""
        print("\nтЪЩя╕П р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ:")
        print(json.dumps(self.config, ensure_ascii=False, indent=2))
        
        change = input("\nр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓? (y/n): ").strip().lower()
        if change == 'y':
            print("\nр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Фр╣Й:")
            print("1. Dashboard Port")
            print("2. Dashboard Host")
            print("3. Update Interval")
            print("4. Auto Start Dashboard")
            
            setting_choice = input("р╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ (1-4): ").strip()
            
            if setting_choice == "1":
                new_port = input("Dashboard Port (р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ: {}): ".format(self.config["dashboard_port"]))
                if new_port.isdigit():
                    self.config["dashboard_port"] = int(new_port)
            
            elif setting_choice == "2":
                new_host = input("Dashboard Host (р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ: {}): ".format(self.config["dashboard_host"]))
                if new_host:
                    self.config["dashboard_host"] = new_host
            
            elif setting_choice == "3":
                new_interval = input("Update Interval (р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ: {}): ".format(self.config["update_interval"]))
                if new_interval.isdigit():
                    self.config["update_interval"] = int(new_interval)
            
            elif setting_choice == "4":
                auto_start = input("Auto Start Dashboard (y/n): ").strip().lower()
                self.config["auto_start_dashboard"] = auto_start == 'y'
            
            self._save_config()
            print("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╣Бр╕ер╣Йр╕з")
    
    def _show_system_info(self):
        """р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ"""
        print("\nЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ:")
        print(f"Python Version: {sys.version}")
        print(f"Platform: {sys.platform}")
        print(f"Current Directory: {os.getcwd()}")
        print(f"Config File: config/environment_config.json")
        print(f"Dashboard URL: http://{self.config['dashboard_host']}:{self.config['dashboard_port']}")

# ===============================================================================
# COMMAND LINE INTERFACE
# ===============================================================================

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description="WAWAGOT.AI Environment Launcher")
    
    parser.add_argument("--mode", choices=["interactive", "dashboard", "check", "optimize", "status"], 
                       default="interactive", help="р╣Вр╕лр╕бр╕Фр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ")
    
    parser.add_argument("--area", choices=["system", "python", "dependencies", "network", "services", "storage", "performance", "security"],
                       help="р╕кр╣Ир╕зр╕Щр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ (р╣Гр╕Кр╣Йр╕Бр╕▒р╕Ъ --mode check)")
    
    parser.add_argument("--host", default="0.0.0.0", help="Dashboard host")
    parser.add_argument("--port", type=int, default=8080, help="Dashboard port")
    
    parser.add_argument("--config", help="р╣Др╕Яр╕ер╣М config")
    parser.add_argument("--output", help="р╣Др╕Яр╕ер╣М output р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М")
    
    return parser.parse_args()

# ===============================================================================
# MAIN EXECUTION
# ===============================================================================

async def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б"""
    args = parse_arguments()
    
    # р╕кр╕гр╣Йр╕▓р╕З Launcher
    launcher = EnvironmentLauncher()
    
    try:
        if args.mode == "interactive":
            # р╣Вр╕лр╕бр╕Ф Interactive
            await launcher.interactive_mode()
        
        elif args.mode == "dashboard":
            # р╣Вр╕лр╕бр╕Ф Dashboard
            await launcher.initialize_system()
            result = await launcher.start_dashboard(args.host, args.port)
            if result["success"]:
                print(f"тЬЕ {result['message']}")
                await result["task"]
            else:
                print(f"тЭМ {result['error']}")
        
        elif args.mode == "check":
            # р╣Вр╕лр╕бр╕Фр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ
            if args.area:
                result = await launcher.run_quick_check(args.area)
            else:
                result = await launcher.run_quick_check()
            
            if result["success"]:
                if args.output:
                    with open(args.output, 'w', encoding='utf-8') as f:
                        json.dump(result["result"], f, ensure_ascii=False, indent=2)
                    print(f"тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╣Др╕Ыр╕вр╕▒р╕З: {args.output}")
                else:
                    print(json.dumps(result["result"], ensure_ascii=False, indent=2))
            else:
                print(f"тЭМ {result['error']}")
        
        elif args.mode == "optimize":
            # р╣Вр╕лр╕бр╕Фр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З
            await launcher.initialize_system()
            result = await launcher.optimize_environment()
            if result["success"]:
                print("тЬЕ р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ")
                print(json.dumps(result["result"], ensure_ascii=False, indent=2))
            else:
                print(f"тЭМ {result['error']}")
        
        elif args.mode == "status":
            # р╣Вр╕лр╕бр╕Фр╕кр╕Цр╕▓р╕Щр╕░
            await launcher.initialize_system()
            result = await launcher.get_system_status()
            if result["success"]:
                if args.output:
                    with open(args.output, 'w', encoding='utf-8') as f:
                        json.dump(result["status"], f, ensure_ascii=False, indent=2)
                    print(f"тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕Цр╕▓р╕Щр╕░р╣Др╕Ыр╕вр╕▒р╕З: {args.output}")
                else:
                    print(json.dumps(result["status"], ensure_ascii=False, indent=2))
            else:
                print(f"тЭМ {result['error']}")
    
    except KeyboardInterrupt:
        print("\nЁЯСЛ р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ...")
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 