"""
üöÄ START SYSTEM FIXED
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Unicode encoding ‡πÉ‡∏ô Windows
"""

import asyncio
import sys
import logging
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional
import codecs

# Fix Windows console encoding
if sys.platform == "win32":
    try:
        import locale
        locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    except:
        pass
    
    # Set console to UTF-8
    try:
        os.system('chcp 65001 >nul')
    except:
        pass

class FixedSystemLauncher:
    def __init__(self):
        self.logger = self.setup_fixed_logger()
        self.config = self.load_config()
        self.status = {"running": False, "components": {}}
        
    def setup_fixed_logger(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Unicode"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # Create UTF-8 file handler
        log_file = log_dir / "system_fixed.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                # Custom console handler for Windows
                self.create_console_handler()
            ]
        )
        return logging.getLogger(__name__)
        
    def create_console_handler(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á console handler ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Unicode"""
        class UnicodeStreamHandler(logging.StreamHandler):
            def emit(self, record):
                try:
                    msg = self.format(record)
                    # Encode to UTF-8 and decode to handle Unicode properly
                    if sys.platform == "win32":
                        try:
                            # Try to write with UTF-8 encoding
                            self.stream.buffer.write(msg.encode('utf-8'))
                            self.stream.buffer.write(b'\n')
                            self.stream.buffer.flush()
                        except:
                            # Fallback to ASCII-safe version
                            safe_msg = msg.encode('ascii', 'ignore').decode('ascii')
                            self.stream.write(safe_msg + '\n')
                            self.stream.flush()
                    else:
                        self.stream.write(msg + '\n')
                        self.stream.flush()
                except Exception:
                    self.handleError(record)
        
        return UnicodeStreamHandler()
        
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_path = Path("config/system.json")
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return self.get_default_config()
        
    def get_default_config(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        return {
            "system": {
                "name": "AI-Powered Chrome Automation - FIXED",
                "version": "2.0.0",
                "auto_start": True
            },
            "chrome": {
                "headless": False,
                "timeout": 30,
                "window_size": "1920x1080"
            },
            "ai": {
                "enabled": True,
                "provider": "local",
                "model": "local_enhanced"
            },
            "thai": {
                "enabled": True,
                "ocr_confidence": 0.8
            },
            "logging": {
                "level": "INFO",
                "file_rotation": True
            }
        }
        
    async def initialize_components(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
        
        components = [
            ("Chrome Controller", self.init_chrome),
            ("Thai Processor", self.init_thai),
            ("AI Integration", self.init_ai),
            ("Visual Recognition", self.init_visual),
            ("Backup Controller", self.init_backup)
        ]
        
        for name, init_func in components:
            try:
                await init_func()
                self.status["components"][name] = "ready"
                print(f"‚úÖ {name} ‡∏û‡∏£‡πâ‡∏≠‡∏°")
            except Exception as e:
                self.status["components"][name] = "error"
                print(f"‚ùå {name} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
    async def init_chrome(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome Controller"""
        from core.chrome_controller import AIChromeController
        api_key = os.getenv("OPENAI_API_KEY", "")
        self.chrome_controller = AIChromeController(api_key)
        await self.chrome_controller.start_ai_browser(
            headless=self.config["chrome"]["headless"]
        )
        
    async def init_thai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Thai Processor"""
        from core.thai_processor import FullThaiProcessor
        self.thai_processor = FullThaiProcessor()
        
    async def init_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Integration"""
        if self.config["ai"]["enabled"]:
            from core.ai_integration import MultimodalAIIntegration
            api_key = os.getenv("OPENAI_API_KEY")
            self.ai_integration = MultimodalAIIntegration(api_key)
            
    async def init_visual(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Visual Recognition"""
        from core.visual_recognition import VisualRecognition
        self.visual_recognition = VisualRecognition()
        
    async def init_backup(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Backup Controller"""
        from core.backup_controller import BackupController
        self.backup_controller = BackupController()
        
    async def launch_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
        print(f"üìã ‡∏£‡∏∞‡∏ö‡∏ö: {self.config['system']['name']} v{self.config['system']['version']}")
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
            await self.initialize_components()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            ready_components = sum(1 for status in self.status["components"].values() if status == "ready")
            total_components = len(self.status["components"])
            
            print(f"üìä Components ‡∏û‡∏£‡πâ‡∏≠‡∏°: {ready_components}/{total_components}")
            
            if ready_components >= 3:  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 components ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°
                self.status["running"] = True
                print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                
                # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
                await self.run_main_system()
                
            else:
                print("‚ö†Ô∏è ‡∏ö‡∏≤‡∏á components ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠")
                await self.run_main_system()
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return 1
            
        return 0
        
    async def run_main_system(self):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
        print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if hasattr(self, 'chrome_controller'):
            try:
                await self.chrome_controller.ai_navigate("https://www.google.com", "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Google")
                print("üåê ‡πÄ‡∏õ‡∏¥‡∏î Google ‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Google ‡πÑ‡∏î‡πâ: {e}")
            
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor
        if hasattr(self, 'thai_processor'):
            try:
                test_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
                result = await self.thai_processor.process_thai_text(test_text)
                print(f"üáπüá≠ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor: {result[:50]}...")
            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thai Processor ‡πÑ‡∏î‡πâ: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration
        if hasattr(self, 'ai_integration'):
            try:
                test_prompt = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö backup-bygod"
                result = await self.ai_integration.process_text(test_prompt)
                print(f"ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration: {result[:50]}...")
            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Integration ‡πÑ‡∏î‡πâ: {e}")
        
        print("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠...")
        print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö!")
        
    def get_system_status(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        return {
            "running": self.status["running"],
            "components": self.status["components"],
            "config": self.config
        }
        
async def main():
    """Main function"""
    launcher = FixedSystemLauncher()
    return await launcher.launch_system()
    
if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1) 