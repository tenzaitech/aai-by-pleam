#!/usr/bin/env python3
"""
Parallel Chrome Test - WAWA
‡πÄ‡∏õ‡∏¥‡∏î Chrome 2 windows, ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤, ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
"""

import asyncio
import random
import time
import threading
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import traceback

class ParallelChromeTest:
    def __init__(self):
        self.drivers = []
        self.screen_width = 1920  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        self.screen_height = 1080
        
    def create_chrome_window(self, window_position):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome window ‡πÉ‡∏´‡∏°‡πà"""
        options = Options()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-plugins")
        options.add_argument("--disable-web-security")
        options.add_argument("--remote-debugging-port=0")
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-backgrounding-occluded-windows")
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-features=TranslateUI")
        options.add_argument("--disable-ipc-flooding-protection")
        options.add_argument("--disable-background-networking")
        options.add_argument("--disable-default-apps")
        options.add_argument("--disable-sync")
        options.add_argument("--disable-translate")
        options.add_argument("--hide-scrollbars")
        options.add_argument("--mute-audio")
        options.add_argument("--no-first-run")
        options.add_argument("--disable-client-side-phishing-detection")
        options.add_argument("--disable-component-update")
        options.add_argument("--disable-domain-reliability")
        options.add_argument("--disable-features=AudioServiceOutOfProcess")
        options.add_argument("--disable-hang-monitor")
        options.add_argument("--disable-prompt-on-repost")
        options.add_argument("--disable-web-resources")
        options.add_argument("--disable-features=VizDisplayCompositor")
        options.add_argument("--disable-features=BlinkGenPropertyTrees")
        options.add_argument("--disable-features=CalculateNativeWinOcclusion")
        options.add_argument("--disable-features=GlobalMediaControls")
        options.add_argument("--disable-features=MediaRouter")
        options.add_argument("--disable-features=OptimizationHints")
        options.add_argument("--disable-features=PasswordGeneration")
        options.add_argument("--disable-features=PreloadMediaEngagementData")
        options.add_argument("--disable-features=Translate")
        options.add_argument("--disable-features=WebUIDarkMode")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á window
        options.add_argument(f"--window-size={self.screen_width//2},{self.screen_height}")
        options.add_argument(f"--window-position={window_position},0")
        
        # ‡πÉ‡∏ä‡πâ remote debugging port ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        if window_position == 0:
            options.add_argument("--remote-debugging-port=9222")
        else:
            options.add_argument("--remote-debugging-port=9223")
        
        driver = webdriver.Chrome(options=options)
        return driver
    
    def position_window(self, driver, position):
        """‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á window"""
        if position == "left":
            driver.set_window_position(0, 0)
            driver.set_window_size(self.screen_width//2, self.screen_height)
        else:  # right
            driver.set_window_position(self.screen_width//2, 0)
            driver.set_window_size(self.screen_width//2, self.screen_height)
    
    def random_typing_test(self, driver, duration=10):
        """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°"""
        try:
            # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google
            driver.get("https://www.google.com")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ search box ‡πÇ‡∏´‡∏•‡∏î
            wait = WebDriverWait(driver, 10)
            search_box = wait.until(EC.presence_of_element_located((By.NAME, "q")))
            
            start_time = time.time()
            while time.time() - start_time < duration:
                # ‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö
                action = random.choice(['type', 'delete'])
                
                if action == 'type':
                    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° 1-3 ‡∏ï‡∏±‡∏ß
                    digits = ''.join([str(random.randint(0, 9)) for _ in range(random.randint(1, 3))])
                    search_box.send_keys(digits)
                    time.sleep(random.uniform(0.1, 0.3))
                else:
                    # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏∏‡πà‡∏° 1-3 ‡∏ï‡∏±‡∏ß
                    delete_count = random.randint(1, 3)
                    for _ in range(delete_count):
                        search_box.send_keys(Keys.BACKSPACE)
                        time.sleep(random.uniform(0.1, 0.2))
                
                time.sleep(random.uniform(0.1, 0.5))
                
        except Exception as e:
            print(f"Error in random typing test: {e}")
    
    async def run_parallel_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö parallel"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Parallel Chrome Test...")
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome windows 2 ‡∏ï‡∏±‡∏ß
            print("üì± ‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome windows...")
            driver1 = self.create_chrome_window(0)  # ‡∏ã‡πâ‡∏≤‡∏¢
            time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ window ‡πÅ‡∏£‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
            driver2 = self.create_chrome_window(self.screen_width//2)  # ‡∏Ç‡∏ß‡∏≤
            
            self.drivers = [driver1, driver2]
            
            # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á windows
            print("üìç ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á windows...")
            self.position_window(driver1, "left")
            time.sleep(1)
            self.position_window(driver2, "right")
            
            # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö parallel
            print("‚å®Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            start_time = time.time()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á threads ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ window
            thread1 = threading.Thread(target=self.random_typing_test, args=(driver1, 10))
            thread2 = threading.Thread(target=self.random_typing_test, args=(driver2, 10))
            
            thread1.start()
            thread2.start()
            
            thread1.join()
            thread2.join()
            
            print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {time.time() - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
        finally:
            # ‡∏õ‡∏¥‡∏î browsers - DISABLED
            print("üîí ‡∏õ‡∏¥‡∏î Chrome windows - DISABLED")
            for driver in self.drivers:
                try:
                    print(f"[DEBUG] driver.quit() called from: {traceback.format_stack()}")
                    # driver.quit()  # DISABLED - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Chrome ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    pass
                except:
                    pass
            
            print("üéØ Parallel Chrome Test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! (Chrome cleanup disabled)")

async def main():
    """Main function"""
    test = ParallelChromeTest()
    await test.run_parallel_test()

if __name__ == "__main__":
    asyncio.run(main()) 